<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amireux&#39;s</title>
  
  <subtitle>a rubbishman</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-01T12:44:27.230Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Amireux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>March_April_Summary</title>
    <link href="http://example.com/posts/41653/"/>
    <id>http://example.com/posts/41653/</id>
    <published>2024-05-01T12:35:38.000Z</published>
    <updated>2024-05-01T12:44:27.230Z</updated>
    
    <content type="html"><![CDATA[<center><b>25计算机考研3-4月总结</b></center><p>​现在是<b style="color:red">2024年5月1日</b>，劳动节。距离我开学<b>（3月4日）</b>已经过去了两个月了，也是时候对前两个月进行总结了。但是现在思绪紊乱，算了，想到哪写到哪吧。</p><span id="more"></span><h1 id="数学篇"><a href="#数学篇" class="headerlink" title="数学篇"></a>数学篇</h1><p>​现在回头看数学，觉得之前一直都是野路子。在三月四号之前，一直都喊着考研的口号，没有进行系统习，直到三月中旬，才开始正式进入复习，整个复习的过程中，发现高数篇不是很难（可能是因为我之前一直在刷高数），但是我只是数学二，直到现在我还在思考到底要不要考<b>数学一</b>，因为数学可能是我的优势。但是又被很多因素制约了，所以我在想，<strong>五月十五</strong>之前应该做出决策了，因为如果选择数学一，那么我需要加倍学习。而对于线性代数，感觉一直有点底子，但是不多，写前三章的时候还好，但是到了第四章，感觉张宇的题有点怪，怪在哪里呢，也不好说，反正就是写不出来。理论我都懂，而且本质我也看了两遍了，但是感觉还是差点意思，立个<strong>flag</strong>吧，五月十五之前把现代学完，然后把张宇的1000题的基础写完。</p><p>​总的来说，数学算是复习的比较顺利的，遇到的坎坷也比较少，也许是因为太简单了吧。这两个月付出给数学的时间不多，平均一天也就两三个小时吧，周六周日付出的可能多一点，平时还得上课，好麻烦QAQ。所以五月份的数学，应该是加大力度，要求每天保持四个小时的强度，如果有课就算啦。不对，早上上课也可以把专业课拿去上课写，不愧是我，真是天才！！！到时候再换下午的时间hhh。五月份开始试一下吧~</p><h1 id="英语篇"><a href="#英语篇" class="headerlink" title="英语篇"></a>英语篇</h1><p>​英语她真的，我哭死，救不起来，唉，只能每天记单词，记单词。数据说话，不背单词：三月1173分钟，四月1259分钟，平均一个月1200分钟，差不多一天40分钟，墨墨背单词一天平均30分钟，所以一天背单词的时间为70分钟，但是语法还是看得少。这周没怎么看语法，好像只看了几集:sob:，在蓝桥杯之前，一直是晚上写算法。直到蓝桥杯之后才天天学语法。而且现在已经开了<strong>每日一句</strong>。新的一个月的目标：完成语法，每天写一篇阅读和长难句，单词坚持，争取一天记到90分钟。英语我也找不到好的方法，慢慢积累吧。</p><h1 id="专业篇"><a href="#专业篇" class="headerlink" title="专业篇"></a>专业篇</h1><p>​专业课，我是打算继续408，说一下目前的进度吧，ds二刷到图了，co已经二刷完毕，os已经到第四章了，cn还没开始。准确来说，到三月十号，我才把ds给刷完，然后用了二十天刷完了co，接下来的一个月就是二刷，co二刷的感觉比一刷好多了，好多之前没怎么懂的最后还是懂了。为什么要二刷co呢，因为我感觉我的弱势就是co。整体的感觉还好，没什么太大的难度，也不能这样说，难度还是有的，但是不大。那么五月份的目标就是将ds二刷完毕，os一刷完毕，cn一刷完毕。我知道这个有点难，但是没办法，必须完成！！！</p><h1 id="竞赛篇"><a href="#竞赛篇" class="headerlink" title="竞赛篇"></a>竞赛篇</h1><p>三月份开始，开了好多比赛，蓝桥杯三个，计算机设计大赛两个，词达人一个，统计建模。nnd，这两个艺术赛道真是圈钱啊，做了好久，占了不少时间。下次绝对不参加了。还有就是python组又拿了省一，欸嘿嘿。计算机设计大赛刚刚交完，也不知道成绩结果。统计建模，唉，还没开始，甚至连题目都还没定，要是早点定的话说不定我现在都做了一半了都，算了，这个估计是拿不到奖了。希望马上要出来的美赛和蓝桥杯以及计算机设计大赛都能拿到国字开头的奖项吧！接下来的一段时间，少打一点比赛吧，多分点精力给初试就好了。至于论文，唉，学校不支持，咱们也没办法，就这样吧。真没钱发论文。</p><p>下面制定一下整体的时间表吧。</p><ul><li>8：00-8：30 一日之计在于晨 背单词</li><li>8：30-12：00 数学启动！</li><li>12：00-14：00吃饭睡觉，要是有余力就记单词</li><li>14：00-14：30 睡醒后脑子最清醒，记单词</li><li>14：30-17：00 408启动！</li><li>17：00-17：30 吃饭</li><li>17：30-18：00记单词</li><li>18：00-19：00刷算法</li><li>19：00-21：00 学英语（包括看课，长难句，单词，阅读）</li><li>21：00-21：45 弹性时间</li><li>21：45-22：30 运动（目前只有跑步的项目）</li><li>22：30-23：00洗洗睡吧</li></ul>]]></content>
    
    
    <summary type="html">&lt;center&gt;&lt;b&gt;25计算机考研3-4月总结&lt;/b&gt;&lt;/center&gt;

&lt;p&gt;​	现在是&lt;b style=&quot;color:red&quot;&gt;2024年5月1日&lt;/b&gt;，劳动节。距离我开学&lt;b&gt;（3月4日）&lt;/b&gt;已经过去了两个月了，也是时候对前两个月进行总结了。但是现在思绪紊乱，算了，想到哪写到哪吧。&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="http://example.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>mathModels</title>
    <link href="http://example.com/posts/55648/"/>
    <id>http://example.com/posts/55648/</id>
    <published>2023-08-30T13:50:29.000Z</published>
    <updated>2023-08-30T14:12:45.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录数模笔记"><a href="#记录数模笔记" class="headerlink" title="记录数模笔记"></a>记录数模笔记</h1><span id="more"></span><h2 id="搜索技巧（百度）"><a href="#搜索技巧（百度）" class="headerlink" title="搜索技巧（百度）"></a>搜索技巧（百度）</h2><h3 id="完全匹配搜索-查询词的外边加上双引号””"><a href="#完全匹配搜索-查询词的外边加上双引号””" class="headerlink" title="完全匹配搜索:查询词的外边加上双引号””"></a>完全匹配搜索:查询词的外边加上双引号””</h3><ul><li>引号中英文均可      例如我需要查找武汉城市学院，百度可能会出现”武汉这座英雄城市有一所学院balabala“，但是我们要找的是武汉城市学院，当我们加上引号之后只会出现有关于”武汉城市学院“</li></ul><h3 id="标题必含关键词-查询词前加上intitle"><a href="#标题必含关键词-查询词前加上intitle" class="headerlink" title="标题必含关键词:查询词前加上intitle:"></a>标题必含关键词:查询词前加上intitle:</h3><ul><li>冒号为英文输入下的            例如我需要查找武汉城市学院，百度可能会出现”标题”全国民办大学排行榜“，然后内容里面有武汉城市学院，但是当我们加上intitle则所有的标题里面都含有“武汉城市学院”</li></ul><h3 id="搜索文档-例如查询词后空格再输入filetype-文件格式-doc-x2F-pdf-x2F-xls-x2F-等等"><a href="#搜索文档-例如查询词后空格再输入filetype-文件格式-doc-x2F-pdf-x2F-xls-x2F-等等" class="headerlink" title="搜索文档:例如查询词后空格再输入filetype:文件格式(doc&#x2F;pdf&#x2F;xls&#x2F;等等)"></a>搜索文档:例如查询词后空格再输入filetype:文件格式(doc&#x2F;pdf&#x2F;xls&#x2F;等等)</h3><ul><li>例如搜索:”张子烨的论文filetype:pdf “</li></ul><h2 id="去掉不想要的-查询词后面加空格后加减号与关键字"><a href="#去掉不想要的-查询词后面加空格后加减号与关键字" class="headerlink" title="去掉不想要的:查询词后面加空格后加减号与关键字"></a>去掉不想要的:查询词后面加空格后加减号与关键字</h2><ul><li>例如搜索后不想看csdn的东西，搜索“张子烨的论文filetype:pdf -csdn”</li></ul><h2 id="查文献"><a href="#查文献" class="headerlink" title="查文献"></a>查文献</h2><h3 id="高级检索-想了解神经网络在信贷策略中的应用，想找一些相关的硕博论文"><a href="#高级检索-想了解神经网络在信贷策略中的应用，想找一些相关的硕博论文" class="headerlink" title="高级检索:想了解神经网络在信贷策略中的应用，想找一些相关的硕博论文"></a>高级检索:想了解神经网络在信贷策略中的应用，想找一些相关的硕博论文</h3><ol><li><p>进入高级检索界面，“+”和“-”可以自定义增加和减少检索字段</p></li><li><p>主题为:企业信贷</p></li><li><p>OR主题为:信贷决策</p></li><li><p>AND 关键词:神经网络，词频设置为“模糊”。模糊”是输入的检索词在检索结果中出现字间间隔可以产生变化。</p></li><li><p>检索结果可按“相关度”或“被引”排序</p></li></ol><h3 id="部分相关网站"><a href="#部分相关网站" class="headerlink" title="部分相关网站"></a>部分相关网站</h3><ol><li>谷歌学术镜像 <a href="http://scholar.hedasudi.com/">http://scholar.hedasudi.com/</a></li><li>open Access Library  <a href="https://www.oalib.com/">https://www.oalib.com/</a></li></ol><h2 id="查数据"><a href="#查数据" class="headerlink" title="查数据"></a>查数据</h2><h3 id="知网、谷歌学术等平台搜索国家统计局"><a href="#知网、谷歌学术等平台搜索国家统计局" class="headerlink" title="知网、谷歌学术等平台搜索国家统计局"></a>知网、谷歌学术等平台搜索国家统计局</h3><ul><li>最全面，月度季度年度，各地区各部门各行业，包罗万象</li><li><a href="https://data.stats.gov.cn/">https://data.stats.gov.cn/</a></li><li>其他国家部门网站大多都有数据分页，如果需要可另行查找</li></ul><h3 id="awesome-public-datasets"><a href="#awesome-public-datasets" class="headerlink" title="awesome-public-datasets"></a>awesome-public-datasets</h3><p>GitHub上的一个项目，包含了经济、地理、能源、教育等所有你能想到的领域的数据<a href="https://github.com/awesomedata/awesome-public-datasets">https://github.com/awesomedata/awesome-public-datasets</a></p><h3 id="EPSDATA平台"><a href="#EPSDATA平台" class="headerlink" title="EPSDATA平台"></a>EPSDATA平台</h3><p>EPSDATA平台有丰富的数据资源和大量分析处理过的数据结果，是收费的，不过可以申请7天的试用. <a href="https://www.epsnet.com.cn/">https://www.epsnet.com.cn/</a></p><h3 id="其他-国家信息中心，kaggle，和鲸社区"><a href="#其他-国家信息中心，kaggle，和鲸社区" class="headerlink" title="其他:国家信息中心，kaggle，和鲸社区"></a>其他:国家信息中心，kaggle，和鲸社区</h3><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li>缺失值</li></ol><ul><li>当缺失太多，超过30%，直接删除</li><li>缺失的不多<ul><li>最简单的处理：均值，众值插入<ul><li>**适用赛题:**人口的数量年龄、经济产业情况等统计数据，对个体精度要求不大的数据</li></ul></li><li>牛顿插值法<ul><li>根据固定公式，构造近似函数，补上缺失值，普遍适用性强，但是缺点是：区间边缘处的不稳定震荡，即龙格现象。不适合对导数有要求的题目</li><li>**适用赛题:**热力学温度、地形测量、定位等只追求函数值精准而不关心变化的数据</li></ul></li><li>样条插值法：<ul><li>用分段光滑的曲线去插值，光滑意味着曲线不仅连续，还要有连续的曲率</li><li>**适用赛题:**零件加工，水库水流量，图像“基线漂移”，机器人轨迹等精度要求高、没有突变的数据</li></ul></li></ul></li></ul><ol start="2"><li>异常值</li></ol><ul><li>当样本中明显和其他数值差异很大的数据，例如一群人的身高数据中有个3米2的，直接删掉<ul><li>正态分布原则3σ原则<ul><li>求解步骤:<ul><li>1.计算均值u和标准差σ</li><li>2.判断每个数据值是否在（u-3σ,u +3 σ )内，不在则为异常值σ</li></ul></li><li><strong>适用题目</strong>:总体符合正态分布，例如人口数据、测量误差、生产加工质量、考试成绩等</li><li>**不适用题目:**总体符合其他分布，例如公交站人数排队论符合泊松分布</li></ul></li></ul></li></ul><h2 id="排版注意事项"><a href="#排版注意事项" class="headerlink" title="排版注意事项"></a>排版注意事项</h2><ol><li><p><strong>各级标题</strong>与正文层次分明</p><ul><li>一般标题级别不超过三级</li><li>正文中文字体设置宋体、英文Times New Roman</li></ul><p>反面例子：</p><p><img src="/posts/55648/image-20230830220328576.png" alt="image-20230830220328576"></p><p><strong>好家伙，直接三段文字三段不一样的字体，字号，行间距，直接展现出了作者的强大的office的功底</strong></p></li><li><p>正文排版紧凑，看起来充实，没有大片空白</p><ul><li>避免图片过大导致出现大片空白，且不要留有空行</li></ul><p>反面例子：</p><p><img src="/posts/55648/image-20230830220518364.png" alt="image-20230830220518364"></p><p><strong>这片空白像我的脑子一样</strong></p></li><li><p>表格与图片</p><ul><li>表格用标准的<strong>三线表</strong>(不要用网格表，血的教训)</li><li>‘<strong>表的标题放在表的上方，图名放在图的下方</strong></li></ul><p>反面例子：</p><p><img src="/posts/55648/image-20230830220622999.png" alt="image-20230830220622999"></p><p><strong>标准的错误，经典的零分—武忠祥</strong></p><p>正面例子：</p><p><img src="/posts/55648/image-20230830220807393.png" alt="image-20230830220807393"></p><p><strong>表下图上，加分！</strong></p><p>反面例子：</p><p><img src="/posts/55648/image-20230830221009519.png" alt="image-20230830221009519"></p><p><strong>人首分离了属于是</strong></p></li><li><p>公式编辑</p><ul><li>建议用markdown或者是latex编写公式</li><li>公式需要解释清楚每个变量的意义;每个公式后面带有编号</li></ul><p>反面例子：</p><p><img src="/posts/55648/image-20230830220903847.png" alt="image-20230830220903847"></p><p><strong>你倒是标注序号啊</strong></p></li><li><p>标题   <strong>（基于xxx模型的xxx问题研究）</strong></p><ul><li>读完标题，就能知道本文建的是什么模型，选一些通俗易懂的词汇</li><li>避免出现公式、非公知公用的缩写</li><li>字数限制在一行内</li><li>xxx模型就是最重要的模型，xxx问题就是赛题的中心词</li></ul></li><li><p><strong>摘要（最重要的）</strong></p><ul><li><p>基本要求</p><ul><li>摘要是对论文的高度概括总结</li><li>让评阅老师读完摘要，就知道本文解决的问题、建立的模型和求解结果。</li></ul></li><li><p>注意事项</p><ul><li>不能出现图表或者是表格</li><li>控制在3&#x2F;4页到一页，字数大约在800~1000，同时一定要段落清晰</li></ul></li><li><p>格式如下：<br><strong>开头段模板</strong>:本文主要研究了XXX问题。根据XXX，利用XXX模型&#x2F;方法，求解出XXX。</p><ul><li>第一句：说清楚研究的问题</li><li>第二句：说清全文采用的模型&#x2F;算法，采取的操作</li><li>开头段不要求写结果</li></ul><p>**中间段模板:**针对问题一&#x2F;二&#x2F;三&#x2F;…，考虑&#x2F;根据XXX，…，建立XXX模型&#x2F;利用XXX方法，…求解出XXX。</p><ul><li>一定要写清结果！<ul><li>优化类、预测类和物理类的题目，要明确写清数值</li><li>要求提供建议或评价的题目，写要明确写清结论和数据依据，但不要有表格;数据过多可说明数据见附录</li></ul></li></ul><p><strong>结尾：</strong></p><ul><li>如果写完后摘要超过一页了，可以不写</li><li>不要累赘重复前面写过的内容</li><li>写一些本文的特色、自夸的语句<strong>（吹牛逼，先把评委骗到手再说）</strong></li></ul><p><strong>摘要：</strong></p><ul><li>关键词一般4~6个</li><li>使用的模型和算法、大家都知道的专业名词、问题的关键词</li><li>中间以空格分开</li></ul></li></ul><p><strong>反面例子：</strong></p><p><img src="/posts/55648/image-20230830215701797.png" alt="image-20230830215701797"></p><p><strong>作为一篇失败的论文，这篇论文是成功的，我们可以看到，他对四个问题采用了三种不同的表达方式，直接显示出了巨大的词汇量。接着就是一记中文标点，直接占了好几个位置，真可谓水文是好办法啊。接下来又是一记中文括号，直接干出一大片白色，打算给与评委视觉上的冲击。然后就是数据的列出，一长条数据直接震惊评委，直接让评委垂死病中惊坐起。</strong></p></li><li><p>参考文献</p><ul><li>引用文献或公开资料都必须按规范列出参考文献并在正文对应处标注</li><li>学一下知网如何引用</li><li>遇到网上的说得对，但是名气不高的文献，将里面的话用自己的话说一遍就好了，不然引用了别人评委不知道直呼：哪来的野鸡论文hhh</li></ul><p>反面例子：</p><p><img src="/posts/55648/image-20230830221107218.png" alt="image-20230830221107218"></p><p><strong>一眼手打，排版还不齐</strong></p></li><li><p>制图</p><ul><li><p>基本要求</p><ul><li>首先就是能展示自己的思路，还能完美的表现自己的结果</li><li>能花里胡哨就花里胡哨，但是前提是不能伤害展示的思路</li><li>图的标题要放在下方，且带有编号（表上图下)·注意排版</li><li>要无首行缩进，居中对齐</li></ul></li><li><p>常见的制图软件：</p><ul><li>最简单:PPT、Excle、Origin、visio</li><li>编程类:Python、 MATLAB、SPSS</li><li>非学术类：亿图</li><li>比较好的：ECharts,js写的    地址：<a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a></li></ul><p>正面例子：<img src="/posts/55648/image-20230830221146047.png" alt="image-20230830221146047"></p><p><strong>好看，爱看，会画就多画一点！！！</strong></p></li></ul><h2 id="线性规划篇"><a href="#线性规划篇" class="headerlink" title="线性规划篇"></a>线性规划篇</h2><p><strong>一句话：有限条件求极值</strong></p><ul><li><p>关键词   题目中提到“怎样安排&#x2F;分配”“尽量多(少)”“最多(少)”“利润最大”“最合理”等词</p><ul><li>生产安排:原材料、设备有限制，总利润最大<ul><li>生产两种机床，利润分别为XXX，A机器和B机器加工，两种机器工作时间…;怎样安排生产使得总<br>利润最大?</li></ul></li><li>投资收益:资产配置、收益率、损失率、组合投资、总收益最大<ul><li>总资金为M，有n种资产可以配置，平均收益率…，风险损失率.，手续费…，设计组合投资方案使<br>得收益尽可能大，总体风险尽可能小</li></ul></li><li>销售运输:产地、销地、产量、销量、运费，总运费最省<ul><li>商品有m个产地和n个销地，各产地的产量…，各销地需求量….由a产地运到b销地的运价xxx;如何<br>调运才能使总运费最省?</li></ul></li><li>车辆安排:路线、起点终点、承载量、时间点、车次安排最合理<ul><li>不同种类的车辆有各自的承载量，工地里有多条路线，满足用工需求的情况下，如何安排车辆能使<br>产量尽可能大?</li></ul></li></ul><p>matlab用<strong>linprog</strong>函数就行，具体自查函数用法，懒得写了</p></li></ul><h2 id="非线性规划篇"><a href="#非线性规划篇" class="headerlink" title="非线性规划篇"></a>非线性规划篇</h2><p><strong>上面的是一次方的，非线性规划篇是高次的</strong></p><ul><li><p>关键词：题目中提到“怎样安排&#x2F;分配”“尽量多(少)”“最多(少)”“利润最大”“最合理”等词;但变量非一次方</p><ul><li>投资规划:资产配置、收益率、损失率、组合投资、总收益率最大&#x2F;最佳投资方案<ul><li>总资金为M，有n种资产可以配置，平均收益率.，风险损失率..，手续费..，设计组合投资方案使得收益尽可能大，总体风险尽可能小</li></ul></li><li>角度调整:飞行管理避免相撞;影院最佳视角<ul><li>飞机位置，速度，进入区域后判定是否相撞，飞机飞行方向角调整的幅度尽量小</li><li>电影院视角、仰角影响观影体验，什么位置观影最佳</li><li>涉及三角函数，为非线性</li></ul></li><li>生产安排:原材料、设备有限制，总利润最大(目标函数或约束条件含有非线性变量)<ul><li>生产两种机床，利润分别为XXX，A机器和B机器加工，两种机器工作时间..;成本或利润与某变量的</li><li>关系是非线性的，例如A机器每小时生产费用是f &#x3D; 50x +0.2x^2(元)，安排生产使得总利润最大</li></ul></li></ul><p>函数用fmincon</p></li></ul><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>函数：graphshortestpath迪杰斯特拉算法不做过多详细说明</p><p>w&#x3D;[1,2,3,4]&#x2F;&#x2F;权重</p><p>DG&#x3D;sparse（[in1,in2,in3,in4],[out1,out2,out3,out4],w）&#x2F;&#x2F;前面的是入度，后面的是出度</p><p>[dist,path,pred]&#x3D;graphshortestpath(DG,1,3)&#x2F;&#x2F;图，起始点，终点</p><p>point_name&#x3D;[“入度1”,“入度2”,“入度3”,“入度4”]&#x2F;&#x2F;到时候画图能显示</p><p>h&#x3D;view（biograph（DG，point_name，“showweights”，“on”））&#x2F;&#x2F;显示</p><p>edges&#x3D;getedgsbynodeid(h.Nodes(path),”ID”);</p><p>set(edges,”LineColor”,[1,0,0])&#x2F;&#x2F;yanse</p><p>set(edges,’LineWidth’,3)&#x2F;&#x2F;粗细</p><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2></li></ol><p>普利姆算法和克鲁斯卡尔算法，相当于dfs和bfs</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;记录数模笔记&quot;&gt;&lt;a href=&quot;#记录数模笔记&quot; class=&quot;headerlink&quot; title=&quot;记录数模笔记&quot;&gt;&lt;/a&gt;记录数模笔记&lt;/h1&gt;</summary>
    
    
    
    <category term="math" scheme="http://example.com/categories/math/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello Amireux</title>
    <link href="http://example.com/posts/23468/"/>
    <id>http://example.com/posts/23468/</id>
    <published>2023-08-01T08:46:08.520Z</published>
    <updated>2023-07-22T08:59:42.191Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://helloamireux.github.io/">Amireux</a>!</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I want to create a new post</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have successfully deployed</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://helloamireux.github.io/&quot;&gt;Amireux&lt;/a&gt;!&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="http://example.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>AdvancedMathematics</title>
    <link href="http://example.com/posts/27495/"/>
    <id>http://example.com/posts/27495/</id>
    <published>2023-08-01T02:22:09.000Z</published>
    <updated>2023-08-01T09:39:30.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仅仅记录高等数学遇到的常见的一些我记不住的玩意</p><span id="more"></span><p>高等数学长这样</p><p><img src="/posts/27495/image-20230801090610405.png" alt="image-20230801090610405"></p><h2 id="常见的积分表"><a href="#常见的积分表" class="headerlink" title="常见的积分表"></a>常见的积分表</h2><p>$$<br>看得见我吗<br>$$</p><p>$$<br>(1)\int x^{n}dx&#x3D;\frac{x^{n+1}}{n+1}+C ( n\ne-1 )</p><p>\</p><p>(2) \int\frac{1}{x}dx&#x3D;ln\left| x \right|+C<br>\</p><p>(3) \int a^{x}dx&#x3D;\frac{a^{x}}{lna}+C</p><p>特别地 \int e^{x}dx&#x3D;e^{x}+C</p><p>\</p><p>(4) \int lnxdx&#x3D;xlnx-x+C<br>\</p><p>(5) \int sinxdx&#x3D;-cosx+C ; \int cosdx&#x3D;sinx+C<br>\</p><p>(6) \int sec^{2}xdx&#x3D;tanx+C ; \int csc^{2}xdx&#x3D;-cotx+C<br>\</p><p>(7) \int secxtanxdx&#x3D;secx+C ; \int cscxcotxdx&#x3D;-cscx+C<br>\</p><p>(8) \int tanxdx&#x3D;-ln\left| cosx \right|+C ; \int cotxdx&#x3D;ln\left| sinx \right|+C<br>\</p><p>(9) \int secxdx&#x3D;ln\left| secx+tanx \right|+C ; \int cscxdx&#x3D;ln\left| cscx-cotx \right|+C<br>\</p><p>(10) \int \frac{1}{\sqrt{1-x^{2}}}dx&#x3D;arcsinx+C<br>\</p><p>(11) \int \frac{1}{1+x^{2}}dx&#x3D;arctanx+C<br>\</p><p>(12) \int arcsinxdx&#x3D;xarcsinx+\sqrt{1-x^{2}}+C ; \int arccosxdx&#x3D;xarccosx-\sqrt{1-x^{2}}+C<br>\</p><p>(13) \int arctanxdx&#x3D;xarctanx-\frac{1}{2}ln(1+x^{2})+C<br>\</p><p>（二）与三角函数有关的不定积分<br>\</p><p>(14) \int sin^{2}xdx&#x3D;\frac{1}{2}(x-sinxcosx)+C ; \int cos^{2}xdx&#x3D;\frac{1}{2}(x+sinxcosx)+C<br>\</p><p>(15) \int xsinxdx&#x3D;sinx-xcosx+C ; \int xcosxdx&#x3D;cosx+xsinx+C<br>\</p><p>(16) \int \frac{1}{1\pm sinx}dx&#x3D;tanx\mp secx+C<br>\</p><p>(17) \int \frac{1}{1\pm cosx}dx&#x3D;-cotx\pm cscx+C<br>\</p><p>(18) \int tan^{2}xdx&#x3D;-x+tanx+C ; \int cot^{2}xdx&#x3D;-x-cotx+C<br>\</p><p>（三）与指数函数，对数函数有关的不定积分<br>\</p><p>(19) \int xe^{x}dx&#x3D;(x-1)e^{x}+C<br>\</p><p>(20) \int \frac{1}{1+e^{x}}dx&#x3D;x-ln(1+e^{x})+C<br>\</p><p>(21) \int xlnxdx&#x3D;\frac{x^{2}}{4}(2lnx-1)+C<br>\</p><p>（四）含有 \sqrt{x^2 \pm a^2} , \sqrt{a^2 - x^2} ,以及 x^2 \pm a^2 的不定积分<br>\</p><p>(22) \int \frac{1}{x^2 + a^2}dx&#x3D;\frac{1}{a}arctan\frac{x}{a}+C , \int \frac{1}{x^2 - a^2}dx&#x3D;\frac{1}{2a}ln\left| \frac{x-a}{x+a} \right|+C<br>\<br>(23) \int \frac{1}{\sqrt{x^2\pm a^2}}dx&#x3D;ln\left| x+\sqrt{x^2 \pm a^2} \right|+C<br>\</p><p>(24) \int \frac{x}{x^{2}\pm a^{2}}dx &#x3D; \frac{1}{2}ln\left| x^2\pm a^2 \right|+C<br>\</p><p>(25) \int \frac{x^2}{x^2+a^2}dx &#x3D; x-arctan\frac{x}{a}+C<br>\</p><p>(26) \int \frac{x^2}{x^2-a^2}dx&#x3D; x+\frac{a}{2}ln\left| \frac{x-a}{x+a} \right|+C<br>\<br>(27) \int \sqrt{x^2\pm a^2}dx&#x3D;\frac{1}{2}(x\sqrt{x^2\pm a^2}\pm a^2ln\left| x +\sqrt{x^2 \pm a^2} \right|) +C<br>\<br>(28) \int \frac{1}{\sqrt{x^2\pm a^2}}dx&#x3D; ln\left| x+\sqrt{x^2 \pm a^2}\right|+C<br>\<br>(29) \int \sqrt{a^2-x^2}dx&#x3D;\frac{1}{2}(x\sqrt{a^2-x^2}+a^2arcsin\frac{x}{a})+C<br>\<br>(30) \int \frac{1}{\sqrt{a^2-x^2}}dx&#x3D;arcsin\frac{x}{a}+C<br>\<br>(31) \int \frac{x^2}{\sqrt{x^2 \pm a^2}}dx&#x3D;\frac{1}{2}(x\sqrt{x^2 \pm a^2} \mp a^2ln\left| x+\sqrt{x^2 \pm a^2} \right|)+C<br>\<br>(32) \int \frac{x^2}{\sqrt{a^2-x^2}}dx&#x3D;\frac{1}{2}(-x\sqrt{a^2-x^2}+a^2arcsin\frac{x}{a})+C<br>\<br>（五）与a+bx有关的不定积分<br>\<br>(33) \int \frac{x}{a+bx}dx&#x3D;\frac{1}{b^2}(bx-aln\left| a+bx \right|)+C<br>\<br>(34) \int \frac{1}{a+bx}dx&#x3D;\frac{1}{b}ln\left| a+bx \right|+C<br>\<br>$$</p><p>nnd，上面的公式不知道为啥显示不出来，那我就直接图片展示了</p><p><img src="/posts/27495/image-20230801101505980.png" alt="image-20230801101505980"></p><p><img src="/posts/27495/image-20230801101519608.png" alt="image-20230801101519608"></p><h2 id="常见泰勒公式"><a href="#常见泰勒公式" class="headerlink" title="常见泰勒公式"></a>常见泰勒公式</h2><p>$$<br>e^{x} &#x3D;1+x+\frac{x^2}{2!} +\cdots +\frac{x^n}{n!} +\cdots &#x3D;\sum_{n&#x3D;0}^{\infty } \frac{x^{n} }{n!}<br>\<br>\sin {x} &#x3D;x-\frac{1}{3!}x^{3} +\cdots +\left ( -1 \right )^n\frac{1}{\left(2n+1\right)!}x^{2n+1}+\cdots &#x3D;\sum_{n&#x3D;0}^{\infty}\left ( -1 \right ) ^n \frac{x^{2n+1}}{(2n+1)!}<br>\<br>\cos {x} &#x3D;1-\frac{1}{2!}x^{2} +\cdots +\left ( -1 \right )^n\frac{1}{\left(2n\right)!}x^{2n}+\cdots &#x3D;\sum_{n&#x3D;0}^{\infty}\left ( -1 \right ) ^n \frac{x^{2n}}{(2n)!}<br>\<br>\ln{(1+x)} &#x3D;x-\frac{1}{2}x^{2} +\cdots +\left ( -1 \right )^{n-1}\frac{x^{n}}{n}+\cdots &#x3D;\sum_{n&#x3D;1}^{\infty}\left ( -1 \right ) ^{n-1} \frac{x^{n}}{n},,-1&lt;x\le 1<br>\<br>\frac{1}{1-x} &#x3D;1+x+x^{2} +\cdots +x^n+\cdots &#x3D;\sum_{n&#x3D;0}^{\infty}x^n, ,\left | x \right | &lt;1<br>\<br>\frac{1}{1+x} &#x3D;1-x+x^{2} -\cdots +\left ( -1 \right )^n x^n+\cdots &#x3D;\sum_{n&#x3D;0}^{\infty}\left ( -1 \right )^nx^n, ,\left | x \right | &lt;1<br>\<br>\left ( 1+x \right ) ^{\alpha } &#x3D;1+\alpha x+\frac{\alpha \left ( \alpha -1 \right ) }{2} x^{2} +o\left ( x^{2} \right ),(x\to 0,\alpha \ne 0)<br>\<br>\tan x&#x3D;x+\frac{1}{3} x^3+o(x^3),(x\to 0)<br>\<br>\arcsin x&#x3D;x+\frac{1}{6} x^3+o(x^3),(x\to 0)<br>\<br>\arctan x&#x3D;x-\frac{1}{3} x^3+o(x^3),(x\to 0)<br>\</p><p>由泰勒公式可以延伸出等价无穷小替换：</p><p>当x趋于0时，<br>\<br>\sin x \sim x ,; \tan x \sim x ,;\arcsin x \sim x,;\arctan x\sim x,<br>\<br>对以上公式进行处理，以下无穷小代换式：<br>\<br>x-\sin x \sim \frac{1}{6} x^3,;\tan x-x\sim \frac{1}{3}x^3,<br>\<br>\arcsin x-x\sim \frac{1}{6}x^3 ,;x-\arctan x\sim \frac{1}{3}x^3 ，<br>\<br>e^{x} -1\sim x,;\ln (1+x)\sim x,<br>\<br>a^{x} -1&#x3D;e^{x\ln a} -1\sim x\ln a;(a&gt;0且a\ne 1),<br>\<br>1-\cos x \sim \frac{1}{2} x^2,<br>\<br>(1+x)^\alpha -1\sim \alpha x ;(\alpha \ne 0).<br>$$</p><p><img src="/posts/27495/image-20230801101527954.png" alt="image-20230801101527954"></p><h2 id="常用泰勒公式"><a href="#常用泰勒公式" class="headerlink" title="常用泰勒公式"></a>常用泰勒公式</h2><p>$$<br>但是一般写作业用到的是以下的<br>\<br>sinx &#x3D; x -\frac{x^3}{6} +o(x^3)<br>\<br>arcsinx&#x3D;x+\frac{x^3}{6}+o(x^3)<br>\<br>cosx&#x3D;1-\frac{x^2}{2}+\frac{x^4}{24}+o(x^4)<br>\<br>arccosx&#x3D;?<br>\<br>tanx &#x3D; x +\frac{x^3}{3}+o(x^3)<br>\<br>arctanx&#x3D;x-\frac{x^3}{3}+o(x^3)<br>\<br>e^x &#x3D; 1+x+\frac{x^2}{2!}+\frac{x^3}{3!}+o(x^3)<br>\<br>ln(1+x)&#x3D;x-\frac{x^2}{2}+\frac{x^3}{3}+o(x^3)<br>\<br>(1+x)^{\alpha}&#x3D;1+\alpha x+\frac{\alpha(\alpha-1)}{2}x^2+o(x^2)<br>\</p><p>\begin{align} tanx - sinx &amp;&#x3D; \frac{1}{2}x^3+o(x^3)<br>\<br>x - sinx &amp;&#x3D; \frac{1}{6}x^3+o(x^3)<br>\<br>arcsinx - x &amp;&#x3D; \frac{1}{6}x^3+o(x^3)<br>\<br>tanx - x &amp;&#x3D; \frac{1}{3}x^3+o(x^3)<br>\<br>x-arctanx &amp;&#x3D;\frac{1}{3}x^3+o(x^3) \end{align}<br>\<br>x-\ln( 1+x ) \sim \frac{x^2}{2}<br>\<br>e^x-1-x\ \sim \frac{x^2}{2}<br>\<br>1-\cos ^ax\ \sim \frac{ax^2}{2}<br>\<br>$$</p><p><img src="/posts/27495/image-20230801101538625.png" alt="image-20230801101538625"></p><h2 id="泰勒补充"><a href="#泰勒补充" class="headerlink" title="泰勒补充"></a>泰勒补充</h2><p>$$<br>\LARGE \begin{align} \arcsin x &amp;&#x3D; \sum_{n &#x3D; 0}^{\infty} \frac{(2 n!)x^{2n+1}}{4^{n}(n !)^{2}(2 n+1)} &#x3D; x+\frac{1}{6} x^{3}+\frac{3}{40} x^{5}+\frac{5}{112} x^{7}+\frac{35}{1152} x^{2}+\cdots+\frac{(2 n) !}{4^{n}(n !)^{2}(2 n+1)} x^{2 n+1}+\cdots, x \in(-1,1) \ \tan x &amp;&#x3D; \sum_{n &#x3D; 1}^{\infty} \frac{B_{2n}4^{n}(4^{n}-1)}{(2 n) !} x^{2 n-1} &#x3D; x+\frac{1}{3} x^{3}+\frac{2}{15} x^{5}+\frac{17}{315} x^{7}+\frac{62}{2835} x^{9}+\frac{1382}{155925} x^{11}+\frac{21844}{6081075} x^{13}+\frac{929569}{638512875} x^{15}+\cdots ,x \in(-1,1) \ \sec x &amp;&#x3D; \sum_{\pi &#x3D; 0}^{\infty} \frac{(-1)^{n}E_{2n} x^{2 n}}{(2 n) !} &#x3D; 1+\frac{1}{2} x^{2}+\frac{5}{24} x^{4}+\frac{61}{720} x^{6}+\cdots, x \in\left(-\frac{\pi}{2}, \frac{\pi}{2}\right)\ \csc x &amp;&#x3D; \sum_{n &#x3D; 0}^{\infty} \frac{(-1)^{n+1} 2\left(2^{2 \mathrm{n}-1}-1\right) B_{2n}}{(2 n) !} x^{2 x-1} &#x3D; \frac{1}{x}+\frac{1}{6} x+\frac{7}{360} x^{3}+\frac{31}{15120} x^{5}+\frac{127}{604800} x^{7}+\frac{73}{3421440} x^{2}+\frac{1414477}{65383718400} x^{11}+\cdots, x \in(0, \pi)\ \cot x &amp;&#x3D; \sum_{n &#x3D; 0}^{\infty} \frac{(-1)^{n} 2^{2n} B_{2n}}{(2 n) !} x^{2 n-1} &#x3D; \frac{1}{x}-\frac{1}{3} x-\frac{1}{45} x^{3}-\frac{2}{945} x^{5}-\cdots, x \in(0, \pi) \end{align}<br>$$</p><h2 id="下面是网上找的比较全的："><a href="#下面是网上找的比较全的：" class="headerlink" title="下面是网上找的比较全的："></a>下面是网上找的比较全的：</h2><p><img src="/posts/27495/1.png" alt="1"></p><p><img src="/posts/27495/2.png" alt="2"></p><p><img src="/posts/27495/3.png" alt="3"></p><p><img src="/posts/27495/4.png" alt="4"></p><p><img src="/posts/27495/5.jpg" alt="5"></p><h2 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……."></a>未完待续…….</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;仅仅记录高等数学遇到的常见的一些我记不住的玩意&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GoStudy</title>
    <link href="http://example.com/posts/24411/"/>
    <id>http://example.com/posts/24411/</id>
    <published>2023-07-26T01:58:32.000Z</published>
    <updated>2023-07-30T07:14:57.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go笔记"><a href="#go笔记" class="headerlink" title="go笔记"></a>go笔记</h1><p>配置go语言的编译环境</p><p>此处省略一万字</p><span id="more"></span><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>首先变量的值用var定义，定义的类型和c一样的</p><ol><li>声明</li></ol><ul><li>第一种<blockquote><p>var name type<br>name &#x3D;value</p></blockquote></li></ul><p>这里和C不一样的就是C是 type name</p><ul><li><p>第二种</p><blockquote><p>var name &#x3D;value</p></blockquote></li><li><p>第三种</p><blockquote><p>name :&#x3D;value</p><p>注意第三种会自动推变量的类型<br>这种的好处就是可以不用写变量类型而直接赋值<br><code>注意这种不能用于全局变量的声明！！！</code></p><p>那么问题来了,”&#x3D;”和”：&#x3D;”有什么区别呢？希望各位好好思考一下</p></blockquote></li></ul><p>同时它也可以一次给多个赋值，和c一样</p><ul><li><p>第一种</p><blockquote><p>var name1,name2 type<br>name1,name2 &#x3D;value1,value2</p></blockquote></li><li><p>第二种</p><blockquote><p>var name1,name2 &#x3D;value1,value2</p></blockquote></li><li><p>第三种</p><blockquote><p>name :&#x3D;value</p></blockquote></li></ul><p>ps:定义了的必须要使用，不使用会报错，如果按ctrl+s,则vscode会自动给你把没使用的删掉<br>这条不仅仅是对变量名有效，对包名，函数什么的都有效</p><ol start="2"><li><p>常量<br>在定义的前面加个const就行了，和c一样</p></li><li><p>类型</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span>   <span class="literal">false</span></span><br><span class="line"><span class="type">byte</span>   和char一样</span><br><span class="line"><span class="type">int</span> </span><br><span class="line"><span class="type">int16</span>, <span class="type">uint16</span>  <span class="number">-32768</span> ~ <span class="number">32767</span>, abs   -&gt;   <span class="number">0</span> ~ <span class="number">65535</span></span><br><span class="line"><span class="type">int32</span>, <span class="type">uint32</span>  <span class="number">-21</span>亿~ <span class="number">21</span>亿, <span class="number">0</span> ~ <span class="number">42</span>亿</span><br><span class="line"><span class="type">int64</span>, <span class="type">uint64</span> </span><br><span class="line"><span class="type">float32</span> </span><br><span class="line"><span class="type">float64</span> </span><br><span class="line"><span class="type">complex64</span>  </span><br><span class="line"><span class="type">complex128</span>    </span><br><span class="line">array     数组</span><br><span class="line"><span class="keyword">struct</span>      结构体</span><br><span class="line"><span class="type">string</span>    </span><br><span class="line">slice   切片</span><br><span class="line"><span class="keyword">map</span>  </span><br><span class="line">channel   <span class="literal">nil</span> 通道</span><br><span class="line"><span class="keyword">interface</span>   <span class="literal">nil</span> 接口</span><br><span class="line">function    <span class="literal">nil</span> 函数</span><br></pre></td></tr></table></figure><p>对应的格式化打印占位符：<br> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">%v,根据你的类型输出</span><br><span class="line"> %T，打印变量类型</span><br><span class="line"> %s，打印字符串</span><br><span class="line"> %f，浮点类型</span><br><span class="line"> %x，%X，<span class="number">16</span>进制   <span class="comment">//%x：0-9，a-f         %X：0-9，A-F</span></span><br><span class="line"> %c，打印字符</span><br><span class="line"> %p，打印地址</span><br><span class="line"> %d，<span class="number">10</span>进制的整数</span><br><span class="line"> %b，<span class="number">2</span>进制的整数</span><br><span class="line"> %o，<span class="number">8</span>进制</span><br></pre></td></tr></table></figure></p><ol start="4"><li><p>算术运算符</p><ol><li>和c一样</li></ol><ul><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li><p>&#x2F;</p></li><li><p>%</p></li><li><p>++              注意go里面没有++i</p></li><li><p>–                和上面一样</p></li></ul></li><li><p>逻辑运算符</p><ul><li>&amp;&amp;</li><li>||</li><li>！</li><li>上面的和c一样</li></ul></li><li><p>位运算符</p><table><thead><tr><th>X</th><th>Y</th><th>X&amp;Y</th><th>X|Y</th><th>X^Y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table></li></ol><ul><li>&amp;</li><li>|</li><li>^</li><li>&lt;&lt;      和  &gt;&gt;</li></ul><ol start="7"><li><p>赋值运算</p><ul><li><p>&#x3D;</p></li><li><p>+&#x3D;</p></li><li><p>-&#x3D;</p></li><li><p>*&#x3D;</p></li><li><p>&#x2F;&#x3D;</p></li><li><p>%&#x3D;</p></li><li><p>&lt;&lt;&#x3D;   和      &gt;&gt;&#x3D;</p></li><li><p>&amp;&#x3D;</p></li><li><p>^&#x3D;</p></li><li><p>|&#x3D;</p></li></ul></li></ol><p>剩下的就没什么好讲的了 基本和c差不多</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li>依赖管理三要素<ul><li>配置文件，描述依赖go.mod</li><li>中心仓库管理依赖库        proxy</li><li>本地工具                           go get&#x2F;mod</li></ul></li></ul><p>创建的命令为  <code>go mod init projectname.go</code></p><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><p>依赖配置产生冲突的时候会选择<code>最低的兼容版本</code></p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="工具-go-mod"><a href="#工具-go-mod" class="headerlink" title="工具-go mod"></a>工具-go mod</h3><ul><li>init 初始化，创建go.mod文件</li><li>download 下载模块到本地缓存</li><li>tidy             增加需要的依赖，删除不需要的依赖</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先<code>测试很重要!!!!</code></p><h3 id="单元测试–规则"><a href="#单元测试–规则" class="headerlink" title="单元测试–规则"></a>单元测试–规则</h3><ul><li><p>单元测试文件以 _test.go结尾</p></li><li><p>测试函数为  func TestXxx(** testing.T)</p></li><li><p>初始化函数逻辑放到TestMain中</p></li></ul><h2 id="单元测试–覆盖率"><a href="#单元测试–覆盖率" class="headerlink" title="单元测试–覆盖率"></a>单元测试–覆盖率</h2><p>定义：<strong>代码覆盖</strong>是软件测试中的一种度量手段，是一种白盒测试方法，描述程序中源代码被测试的比例和程度，所得比例就称之为<strong>代码覆盖率</strong>。我们在做测试时，代码覆盖率常常被用来作为衡量测试好坏的指标。</p><p>我们必须尽可能的提高测试率。</p><ul><li>一般覆盖率：50%~60%    较高覆盖率：80%+</li><li>测试分支相互独立，全面覆盖</li><li>测试单元粒度足够小，函数单一职责</li></ul><h2 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h2><ul><li>数据层：数据model</li><li>逻辑层：业务entity</li><li>视图层：试图view</li></ul><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a><center>并发编程<center></center></center></h2><h2 id="1-子协程"><a href="#1-子协程" class="headerlink" title="1.子协程"></a>1.子协程</h2><p>创建一个协程非常简单，就是在一个任务函数前面添加一个go关键字</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world: &quot;</span> + fmt.Sprint(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;开始咯&quot;)</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123; <span class="comment">//开启协程</span></span><br><span class="line">hello(j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second) <span class="comment">//保证子协程在运行的时候主协程不退出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要注意的是一定要加<code>time.Sleep(time.Second)</code>，这是为了开启子协程的时候主协程不立刻退出（延迟两秒）</p><p>这里还有的就是他们会互相抢占资源，所以打印的不一定是按照顺序来的</p><p>比如这里我打印的就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello world: 1</span><br><span class="line">hello world: 0</span><br><span class="line">hello world: 3</span><br><span class="line">hello world: 4</span><br><span class="line">hello world: 2</span><br></pre></td></tr></table></figure><h2 id="2-通道"><a href="#2-通道" class="headerlink" title="2.通道"></a>2.通道</h2><h3 id="通道分为有缓冲和无缓冲"><a href="#通道分为有缓冲和无缓冲" class="headerlink" title="通道分为有缓冲和无缓冲"></a>通道分为<code>有缓冲</code>和<code>无缓冲</code></h3><ul><li>语法：</li></ul><blockquote><p>Unbuffered:&#x3D;make(chan int)整型无缓冲通道</p><p>buffered：&#x3D;make(chan int ,10)整形有缓冲通道</p></blockquote><p>无缓冲通道用于执行同步通信，而有缓冲通道用于执行异步通信。</p><p>通道可以用这样的图来表示</p><img src="/posts/24411/image-20230726110323885.png"><h3 id="将值发送到通道德代码块需要用-lt-运算符"><a href="#将值发送到通道德代码块需要用-lt-运算符" class="headerlink" title="将值发送到通道德代码块需要用&lt;-运算符"></a>将值发送到通道德代码块需要用<code>&lt;-</code>运算符</h3><ul><li>语法：</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src:=make(chan string,5)//创建通道</span><br><span class="line">src&lt;- &quot; hello&quot;//通过通道发送字符串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:=src //从通道接收字符串</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)     <span class="comment">//创建容量为1的通道</span></span><br><span class="line">dest := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>) <span class="comment">//创建容量为3的通道</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(src) <span class="comment">//关闭通道</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">src &lt;- i <span class="comment">//送到src里面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(dest)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> src &#123;</span><br><span class="line">dest &lt;- i * i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> dest &#123;</span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通道的发送和接收特性"><a href="#通道的发送和接收特性" class="headerlink" title="通道的发送和接收特性"></a>通道的发送和接收特性</h3><ol><li><p>对于同一个通道，发送操作之间是互斥的，接收操作之间也是互斥的。</p></li><li><p>发送操作和接收操作中对元素值的处理都是不可分割的。</p></li><li><p>发送操作在完全完成之前会被阻塞。接收操作也是如此。</p></li></ol><h2 id="3-WaitGroup同步"><a href="#3-WaitGroup同步" class="headerlink" title="3.WaitGroup同步"></a>3.WaitGroup同步</h2><p>上面的第一个的代码不是很优雅，所以我们这里使用wait函数实行同步</p><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hello world: &quot;</span> + fmt.Sprint(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ManyGoWait</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">5</span>) <span class="comment">//计数器+5</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done() <span class="comment">//计数器-1</span></span><br><span class="line">hello(j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">//阻塞到计数器为0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> ManyGoWait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-runtime包"><a href="#4-runtime包" class="headerlink" title="4.runtime包"></a>4.runtime包</h2><ul><li>runtime.Gosched()  让出等待时间</li><li>runtime.Goexit()      退出当前协程</li><li>runtime.GOMAXPROCS(num int)设置最大核心数  如果改成1则只有一核执行</li></ul><h2 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h2><p>我们接下来先看这段代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i++: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i--: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;end i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的运行的结果我们会发现有时候不是100，有时候是100。这就是因为异步的原因，那么我们怎么解决呢？</p><p>这里我们需要进行加锁</p><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex<span class="comment">//定义锁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">lock.Lock() <span class="comment">//上锁</span></span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i++: %v\n&quot;</span>, i)</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">lock.Unlock() <span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock.Lock() <span class="comment">//上锁</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">2</span>)</span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i--: %v\n&quot;</span>, i)</span><br><span class="line">lock.Unlock() <span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Printf(<span class="string">&quot;end i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><ul><li>timer.c</li></ul><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">timer := time.NewTicker(time.Second * <span class="number">2</span>) <span class="comment">//两秒</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">t1 := &lt;-timer.C<span class="comment">//阻塞的时间，直到时间到了</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;t1: %v\n&quot;</span>, t1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两者的时间差了两秒</p><p>这里也可以不需要用t1接收   也就是说两者等价</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">timer := time.NewTicker(time.Second * <span class="number">2</span>) <span class="comment">//两秒</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">&lt;-timer.C</span><br><span class="line">fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>time.after()</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">&lt;-time.After(time.Second * <span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;time.Now(): %v\n&quot;</span>, time.Now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面都等价</p><ul><li>time.Reset()重置时间</li></ul><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">timer := time.NewTicker(time.Second * <span class="number">5</span>) <span class="comment">//原来是五秒</span></span><br><span class="line">timer.Reset(time.Second * <span class="number">1</span>)             <span class="comment">//设置成为一秒</span></span><br><span class="line">&lt;-timer.C</span><br><span class="line">fmt.Println(<span class="string">&quot;after&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ticker定时器"><a href="#ticker定时器" class="headerlink" title="ticker定时器"></a>ticker定时器</h3><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker := time.NewTicker(time.Second)<span class="comment">//定时</span></span><br><span class="line">counter := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ticker...&quot;</span>)</span><br><span class="line">counter++</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一秒运行一次，运行五次结束</p><h3 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h3><p>上面的那个还需要上锁，我们把代码改一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;sync/atomic&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span>s</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="type">int32</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span></span> &#123;</span><br><span class="line">atomic.AddInt32(&amp;i, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sub</span><span class="params">()</span></span> &#123;</span><br><span class="line">atomic.AddInt32(&amp;i, <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line"><span class="comment">// wg.Add(1)</span></span><br><span class="line"><span class="keyword">go</span> add()</span><br><span class="line"><span class="keyword">go</span> sub()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// wg.Wait()</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Printf(<span class="string">&quot;end i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="标准库篇"><a href="#标准库篇" class="headerlink" title="标准库篇"></a>标准库篇</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>代码如下：会在当前目录下创建一个a.txt</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Create(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;f,name()&quot;</span>, f.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">createFile()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>代码如下：会在当前目录下创建一个a文件夹</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建目录</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := os.Mkdir(<span class="string">&quot;a&quot;</span>, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想创建多级可以用以下的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeDir</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//创建多级</span></span><br><span class="line">err2 := os.MkdirAll(<span class="string">&quot;a/b/c&quot;</span>, os.ModePerm)</span><br><span class="line"><span class="keyword">if</span> err2 != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err2: %v\n&quot;</span>, err2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文件-amp-目录"><a href="#删除文件-amp-目录" class="headerlink" title="删除文件&amp;目录"></a>删除文件&amp;目录</h2><p>代码如下:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := os.Remove(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除目录的代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDir</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := os.RemoveAll(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除a和a下面的所有的目录</p><h2 id="打印当前工作目录"><a href="#打印当前工作目录" class="headerlink" title="打印当前工作目录"></a>打印当前工作目录</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">wd</span><span class="params">()</span></span> &#123;</span><br><span class="line">dir, err := os.Getwd()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dir: %v\n&quot;</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改当前目录"><a href="#修改当前目录" class="headerlink" title="修改当前目录"></a>修改当前目录</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeWd</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := os.Chdir(<span class="string">&quot;d:/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(os.Getwd())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改当前目录到D盘</p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Rename</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := os.Rename(<span class="string">&quot;test01.txt&quot;</span>, <span class="string">&quot;test02.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将test01.txt修改成为test02.txt</p><p>这里需要注意的是，我们假设test01.txt里面写的是111，而test02.txt里面的内容是222。执行上面的操作之后，原来的test02.txt将会被覆盖，也是是说test02.txt里面的内容将会变成111   这里需要大家注意一下</p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">b, err := os.ReadFile(<span class="string">&quot;test.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;b: %v\n&quot;</span>, <span class="type">string</span>(b[:]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写文件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">os.WriteFile(<span class="string">&quot;test.txt&quot;</span>, []<span class="type">byte</span>(s), os.ModePerm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里需要注意的是这里会直接覆盖</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.OpenFile(<span class="string">&quot;notes.txt&quot;</span>, os.O_RDWR|os.O_CREATE, <span class="number">0755</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// log.Fatal(err)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;f: %v\n&quot;</span>, f.Name())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := f.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// log.Fatal(err)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f, _ := os.Open(<span class="string">&quot;notes.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">10</span>)</span><br><span class="line">n, err := f.Read(buf)</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;n: %v\n&quot;</span>, n)</span><br><span class="line">fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：这里可能会产生<code>脏读</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">f, _ := os.Open(<span class="string">&quot;a.txt&quot;</span>)</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">3</span>)<span class="comment">//从第三个开始读</span></span><br><span class="line">n, _ := f.ReadAt(buf, <span class="number">4</span>)<span class="comment">//读四个</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;n: %v\n&quot;</span>, n)</span><br><span class="line">fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="io包"><a href="#io包" class="headerlink" title="io包"></a>io包</h2><h3 id="NewReader"><a href="#NewReader" class="headerlink" title="NewReader()"></a>NewReader()</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := strings.NewReader(<span class="string">&quot;hello world&quot;</span>)<span class="comment">//创建输入流</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">15</span>)<span class="comment">//创建通道</span></span><br><span class="line">r.Read(buf)<span class="comment">//输入到buf中</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;string(buf): %v\n&quot;</span>, <span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="json包"><a href="#json包" class="headerlink" title="json包"></a>json包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span></span><br><span class="line">Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体转json</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;</span><br><span class="line"><span class="string">&quot;tom&quot;</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;666@email.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">b, _ := json.Marshal(p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;string(b): %v\n&quot;</span>, <span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//json转结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">b := []<span class="type">byte</span>(<span class="string">`&#123;&quot;Name&quot;:&quot;tom&quot;,&quot;Age&quot;:20,&quot;Email&quot;:&quot;666@email.com&quot;&#125;`</span>)</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">json.Unmarshal(b, &amp;p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// test()</span></span><br><span class="line">test2()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="xml包"><a href="#xml包" class="headerlink" title="xml包"></a>xml包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/xml&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span></span><br><span class="line">Email <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体转json</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := Person&#123;</span><br><span class="line"><span class="string">&quot;tom&quot;</span>,</span><br><span class="line"><span class="number">20</span>,</span><br><span class="line"><span class="string">&quot;666.@email.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">b, _ := xml.MarshalIndent(p, <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;string(b): %v\n&quot;</span>, <span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string(b):  &lt;Person&gt;</span><br><span class="line">  &lt;Name&gt;tom&lt;/Name&gt;</span><br><span class="line">  &lt;Age&gt;20&lt;/Age&gt;</span><br><span class="line">  &lt;Email&gt;666.@email.com&lt;/Email&gt;</span><br><span class="line"> &lt;/Person&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json转结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`</span></span><br><span class="line"><span class="string">string(b):  &lt;Person&gt;</span></span><br><span class="line"><span class="string">&lt;Name&gt;tom&lt;/Name&gt;</span></span><br><span class="line"><span class="string">&lt;Age&gt;20&lt;/Age&gt;</span></span><br><span class="line"><span class="string">&lt;Email&gt;666.@email.com&lt;/Email&gt;</span></span><br><span class="line"><span class="string">   &lt;/Person&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">b := []<span class="type">byte</span>(s)</span><br><span class="line"><span class="keyword">var</span> p Person</span><br><span class="line">xml.Unmarshal(b, &amp;p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p: &#123;tom 20 666.@email.com&#125;</span><br></pre></td></tr></table></figure><h1 id="mysql篇"><a href="#mysql篇" class="headerlink" title="mysql篇"></a>mysql篇</h1><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><blockquote><p> go get -u github.com&#x2F;go-sql-driver&#x2F;mysql</p></blockquote><h2 id="初始化模块"><a href="#初始化模块" class="headerlink" title="初始化模块"></a>初始化模块</h2><p>go mod init m</p><h2 id="执行-go-mod-tidy"><a href="#执行-go-mod-tidy" class="headerlink" title="执行 go mod tidy"></a>执行 go mod tidy</h2><p>go mod tidy</p><h2 id="导入驱动"><a href="#导入驱动" class="headerlink" title="导入驱动"></a>导入驱动</h2><blockquote><p>import (</p><p>  “database&#x2F;sql”</p><p>  “fmt”</p><p>  “time”</p><p>)</p></blockquote><p>驱动代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:password@/go_db&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;d: %v\n&quot;</span>, d)</span><br><span class="line"><span class="comment">//最大连接时长</span></span><br><span class="line">d.SetConnMaxLifetime(time.Minute * <span class="number">3</span>)</span><br><span class="line"><span class="comment">//最大打开数</span></span><br><span class="line">d.SetMaxOpenConns(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//空闲连接数</span></span><br><span class="line">d.SetMaxIdleConns(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:password@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">d, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = d.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">dsn := <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">d, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line">db = d</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = d.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;insert into user_tbl( username, password) values (?,?) &quot;</span></span><br><span class="line">r, err := db.Exec(s, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;ls123&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;走到这了&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;插入出现问题&quot;)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i, _ := r.LastInsertId()</span><br><span class="line">fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;初始化成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">insert()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code=0x1 addr=0x20 pc=0x71d0f3]</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;database/sql&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initDB</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">dsn := <span class="string">&quot;root:1234@tcp(127.0.0.1:3306)/go_db?charset=utf8mb4&amp;parseTime=True&quot;</span></span><br><span class="line">d, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, dsn)</span><br><span class="line"><span class="comment">// db = d</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = d.Ping()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="string">&quot;insert into user_tbl( username, password) values (?,?) &quot;</span></span><br><span class="line">r, err := db.Exec(s)</span><br><span class="line"><span class="comment">// db.Exec(s, &quot;zhangsan&quot;, &quot;zs123&quot;)</span></span><br><span class="line">fmt.Println(<span class="string">&quot;走到这了&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// fmt.Println(&quot;插入出现问题&quot;)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i, _ := r.LastInsertId()</span><br><span class="line">fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := initDB()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;初始化成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">insert()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>原因是因为db没有被赋值，也就是init的第三行，把它解掉注释就好了</code></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id       <span class="type">int</span></span><br><span class="line">username <span class="type">string</span></span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;select * from user_tbl where id=?&quot;</span></span><br><span class="line"><span class="keyword">var</span> u User</span><br><span class="line">err := db.QueryRow(s, <span class="number">2</span>).Scan(&amp;u.id, &amp;u.username, &amp;u.password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;u: %v\n&quot;</span>, u)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询多行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">querymore</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;select * from user_tbl&quot;</span></span><br><span class="line">r, err := db.Query(s)</span><br><span class="line"><span class="keyword">var</span> u User</span><br><span class="line"><span class="keyword">defer</span> r.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> r.Next() &#123;</span><br><span class="line">r.Scan(&amp;u.id, &amp;u.username, &amp;u.password)</span><br><span class="line">fmt.Printf(<span class="string">&quot;u: %v\n&quot;</span>, u)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;update user_tbl set username=?,password=? where id=?&quot;</span></span><br><span class="line">r, err := db.Exec(s, <span class="string">&quot;big kite&quot;</span>, <span class="string">&quot;456789&quot;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i, _ := r.RowsAffected()</span><br><span class="line">fmt.Printf(<span class="string">&quot;i: %v\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作MongoDB"><a href="#操作MongoDB" class="headerlink" title="操作MongoDB"></a>操作MongoDB</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址</p><blockquote><p><a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a>   </p></blockquote><p>打开客户端</p><blockquote><p>mongo.exe</p></blockquote><p>创建数据库</p><blockquote><p>use go_db;</p></blockquote><p>创建集合</p><blockquote><p>db.createCollection(“student”);</p></blockquote><p>下载驱动</p><blockquote><p> go get go.mongodb.org&#x2F;mongo-driver&#x2F;mongo</p></blockquote><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><ol><li>插入一条数据</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">()</span></span> &#123;</span><br><span class="line">initDb()</span><br><span class="line">s1 := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line">ior, err := c.InsertOne(context.TODO(), s1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ior.InsertedID: %v\n&quot;</span>, ior.InsertedID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>插入多条</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insertMore</span><span class="params">()</span></span> &#123;</span><br><span class="line">initDb()</span><br><span class="line">c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line">s1 := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">s2 := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;rose&quot;</span>,</span><br><span class="line">Age:  <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line">stus := []<span class="keyword">interface</span>&#123;&#125;&#123;s1, s2&#125;</span><br><span class="line">imr, err := c.InsertMany(context.TODO(), stus)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;imr.InsertedIDs: %v\n&quot;</span>, imr.InsertedIDs)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到mongod里面查找数据是</p><blockquote><p>db.Student.find()</p></blockquote><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">()</span></span> &#123;</span><br><span class="line">initDb()</span><br><span class="line">ctx := context.TODO()</span><br><span class="line"><span class="keyword">defer</span> client.Disconnect(context.TODO()) <span class="comment">//关掉</span></span><br><span class="line">c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line"></span><br><span class="line">c2, err := c.Find(ctx, bson.D&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c2.Close(ctx)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c2.Next(ctx) &#123;</span><br><span class="line"><span class="keyword">var</span> res bson.D</span><br><span class="line">c2.Decode(&amp;res)</span><br><span class="line">fmt.Printf(<span class="string">&quot;res: %v\n&quot;</span>, res)</span><br><span class="line">fmt.Printf(<span class="string">&quot;res.Map(): %v\n&quot;</span>, res.Map())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">()</span></span> &#123;</span><br><span class="line">initDb()</span><br><span class="line">c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line">ctx := context.TODO()</span><br><span class="line">update := bson.D&#123;&#123;<span class="string">&quot;$set&quot;</span>, bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;big kite&quot;</span>&#125;, &#123;<span class="string">&quot;age&quot;</span>, <span class="number">22</span>&#125;&#125;&#125;&#125;</span><br><span class="line">ur, err := c.UpdateMany(ctx, bson.D&#123;&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;rose&quot;</span>&#125;&#125;, update)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ur.ModifiedCount: %v\n&quot;</span>, ur.ModifiedCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delete</span><span class="params">()</span></span> &#123;</span><br><span class="line">initDb()</span><br><span class="line">c := client.Database(<span class="string">&quot;go_db&quot;</span>).Collection(<span class="string">&quot;Student&quot;</span>)</span><br><span class="line">ctx := context.TODO()</span><br><span class="line">dr, err := c.DeleteMany(ctx, bson.D&#123;&#123;<span class="string">&quot;age&quot;</span>, <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dr.DeletedCount: %v\n&quot;</span>, dr.DeletedCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gorm"><a href="#gorm" class="headerlink" title="gorm"></a>gorm</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>go get -u gorm.io&#x2F;gorm</p><p>go get -u gorm.io&#x2F;driver&#x2F;mysql</p></blockquote><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Code  <span class="type">string</span></span><br><span class="line">Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:runaway0926@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建表</span></span><br><span class="line">db.AutoMigrate(&amp;Product&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">p := Product&#123;</span><br><span class="line">Code:  <span class="string">&quot;1001&quot;</span>,</span><br><span class="line">Price: <span class="number">100</span>,</span><br><span class="line">&#125;</span><br><span class="line">db.Create(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新-2"><a href="#更新-2" class="headerlink" title="更新"></a>更新</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Product</span><br><span class="line">db.First(&amp;p, <span class="number">1</span>)</span><br><span class="line">db.Model(&amp;p).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// db.Model(&amp;p).Update(Product&#123;Price: 1001, Code: &quot;1002&quot;&#125;) //仅更新非零字段</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询-2"><a href="#查询-2" class="headerlink" title="查询"></a>查询</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p Product</span><br><span class="line">db.First(&amp;p, <span class="number">1</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;p: %v\n&quot;</span>, p)</span><br><span class="line"><span class="comment">//db.First(&amp;p, &quot;code=?&quot;, &quot;1001&quot;) //查找code字段为1001的记录</span></span><br><span class="line"><span class="comment">//fmt.Printf(&quot;p: %v\n&quot;, p)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">delete</span><span class="params">(db *gorm.DB)</span></span> &#123;</span><br><span class="line"><span class="comment">//添加删除标记，不会真的删除</span></span><br><span class="line"><span class="keyword">var</span> p Product</span><br><span class="line">db.First(&amp;p, <span class="number">1</span>)</span><br><span class="line">db.Delete(&amp;p, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明模型"><a href="#声明模型" class="headerlink" title="声明模型"></a>声明模型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model    <span class="comment">//继承</span></span><br><span class="line">Code  <span class="type">string</span></span><br><span class="line">Price <span class="type">uint</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意这里要大写</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 系统会自动帮忙调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">dsn := <span class="string">&quot;root:runaway0926@tcp(127.0.0.1:3306)/golang_db?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">d, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">db = d</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证继承</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert1</span><span class="params">()</span></span> &#123;</span><br><span class="line">user := User&#123;</span><br><span class="line">Name:     <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">Age:      <span class="number">20</span>,</span><br><span class="line">Brithday: time.Now(),</span><br><span class="line">&#125;</span><br><span class="line">res := db.Create(&amp;user)</span><br><span class="line">fmt.Printf(<span class="string">&quot;res.RowsAffected: %v\n&quot;</span>, res.RowsAffected)</span><br><span class="line">fmt.Printf(<span class="string">&quot;user.ID: %v\n&quot;</span>, user.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择添加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = User&#123;</span><br><span class="line">Name:     <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">Age:      <span class="number">20</span>,</span><br><span class="line">Brithday: time.Now(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert2</span><span class="params">()</span></span> &#123;</span><br><span class="line">db.Select(<span class="string">&quot;Name&quot;</span>, <span class="string">&quot;Age&quot;</span>, <span class="string">&quot;CreateAt&quot;</span>).Create(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量添加"><a href="#批量添加" class="headerlink" title="批量添加"></a>批量添加</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert3</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> users = []User&#123;&#123;Name: <span class="string">&quot;jinzhu1&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu2&quot;</span>&#125;, &#123;Name: <span class="string">&quot;jinzhu3&quot;</span>&#125;&#125;</span><br><span class="line">db.Create(&amp;users)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意这里需要修改sql_model</span><br><span class="line">在my.ini</span><br><span class="line">添加   sql_mode=NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO</span><br></pre></td></tr></table></figure><h1 id="gin"><a href="#gin" class="headerlink" title="gin"></a>gin</h1><p>今天用vscode构建gin的时候</p><p>首先执行</p><blockquote></blockquote><p>接着上面显示下载好了</p><p><img src="/posts/24411/image-20230726164610717.png" alt="image-20230726164610717"></p><p>但是开始写的时候，包含这个包爆红了那么我们怎么解决呢？</p><p><img src="/posts/24411/image-20230726164631786.png" alt="image-20230726164631786"></p><p>步骤如下：</p><p><img src="/posts/24411/image-20230726165120119.png" alt="image-20230726165120119"></p><blockquote><ol><li>go env -w GOSUMDB&#x3D;off</li><li>go env -w GO111MODULE&#x3D;on</li><li>go env -w GOPROXY&#x3D;<a href="https://mirrors.aliyun.com/goproxy/,direct">https://mirrors.aliyun.com/goproxy/,direct</a></li></ol></blockquote><p>然后再输入</p><blockquote><p>go get github.com&#x2F;gin-gonic&#x2F;gin</p></blockquote><p>如下图所示</p><p><img src="/posts/24411/image-20230726165234693.png" alt="image-20230726165234693"></p><p>然后再看我们的代码</p><p><img src="/posts/24411/image-20230726165339587.png" alt="image-20230726165339587"></p><p>就不飘红啦</p><p>那么接下来，gin，启动!</p><p><img src="/posts/24411/image-20230726170328721.png" alt="image-20230726170328721"></p><p>离谱，怎么跑不起来，仔细琢磨一番</p><p>会不会是端口被占用了？</p><h2 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h2><ol><li>win+r，cmd  老朋友了</li><li>netstat -ano | findstr “8082”</li></ol><blockquote><p>如果输入上面的信息没有显示，说明有端口占用情况</p></blockquote><p><img src="/posts/24411/image-20230726170948363.png" alt="image-20230726170948363"></p><p>那么问题究竟是什么呢？</p><p><img src="/posts/24411/image-20230726170415381.png" alt="image-20230726170415381"></p><p>少写了个<code>:</code>    我真谢谢你</p><p>那么继续，gin，启动！</p><p><img src="/posts/24411/image-20230726170515261.png" alt="image-20230726170515261"></p><p>哎嘿，跑起来了，那么我们到8082端口看看</p><p><img src="/posts/24411/image-20230726170547244.png" alt="image-20230726170547244"></p><p>芜湖，起飞</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;go笔记&quot;&gt;&lt;a href=&quot;#go笔记&quot; class=&quot;headerlink&quot; title=&quot;go笔记&quot;&gt;&lt;/a&gt;go笔记&lt;/h1&gt;&lt;p&gt;配置go语言的编译环境&lt;/p&gt;
&lt;p&gt;此处省略一万字&lt;/p&gt;</summary>
    
    
    
    <category term="go" scheme="http://example.com/categories/go/"/>
    
    
  </entry>
  
  <entry>
    <title>LinuxStudy</title>
    <link href="http://example.com/posts/42700/"/>
    <id>http://example.com/posts/42700/</id>
    <published>2023-07-22T02:44:19.000Z</published>
    <updated>2023-07-22T13:05:44.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><span id="more"></span><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令（list）"><a href="#ls命令（list）" class="headerlink" title="ls命令（list）"></a>ls命令（list）</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><p>上面的几个都可以混合使用，而且这三个顺序可以改变比如-la，-lh等等，其中-l和-h在一起更配哦。</p><p>学个小知识，这里的-l之后，我们可以看最前面的东西，<code>d</code>代表文件夹，<code>-</code>代表文件</p><h3 id="关于隐藏文件、文件夹"><a href="#关于隐藏文件、文件夹" class="headerlink" title="关于隐藏文件、文件夹"></a>关于隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要选择<code>-a</code>选项才可查看到。</p><h2 id="pwd命令（print-working-directory）"><a href="#pwd命令（print-working-directory）" class="headerlink" title="pwd命令（print working directory）"></a>pwd命令（print working directory）</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><p>没有选项，没有参数，直接pwd就可以了</p><h2 id="cd命令（change-directory）"><a href="#cd命令（change-directory）" class="headerlink" title="cd命令（change directory）"></a>cd命令（change directory）</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><p>这里直接cd 后面接<code>/</code>就好了（好像后面不接也行？）</p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，也就是：非<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，也就是：以 <code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p><p><code>相对就是相对于当前目录的路径，会根据你当前的路径改变而改变的</code></p><p><code>而绝对路径就不将就当前的路径，不论你当前在哪一个路径，这个路径都是绝对不会变的</code></p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前目录，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令（make-directory）"><a href="#mkdir命令（make-directory）" class="headerlink" title="mkdir命令（make directory）"></a>mkdir命令（make directory）</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径，必须得填，相对和绝对都可以</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页   （空格+B）&#x3D;&#x3D;往上翻页</li><li><code>q</code>退出查看</li></ul></li></ul><p>这个比较适合看内容比较多的</p><h2 id="cp命令（copy）"><a href="#cp命令（copy）" class="headerlink" title="cp命令（copy）"></a>cp命令（copy）</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令（move）"><a href="#mv命令（move）" class="headerlink" title="mv命令（move）"></a>mv命令（move）</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><p>这里记录一个比较好笑的事情，我本来准备把test01.txt移动到test01里面，但是我那时候没写test01，导致直接test01.txt直接改名成为test01，然后我疯狂cd &#x2F;test01，但是就是进不去，最后cat &#x2F;test01，草！</p><h2 id="rm命令（remove）"><a href="#rm命令（remove）" class="headerlink" title="rm命令（remove）"></a>rm命令（remove）</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用<ul><li>选项：-f，（force）强制删除，不会给出确认提示，一般root用户会用到</li></ul></li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><p>rm -rf&#x2F;*</p><p>上面这行可以让你从Linux入门到缝纫机精通</p><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1：按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><p>全局扫描的话是 find &#x2F; -name “文件名字”</p><p>语法2：按照文件大小进行查找：<code>find 起始路径 -size +|-n[kMG]</code></p><ul><li>+,-表示大于和小于</li><li>n代表大小数字</li><li>kMG代表大小单位，k表示kb，M表示MB，G表示GB，注意这里的k是小写</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令（word-count）"><a href="#wc命令（word-count）" class="headerlink" title="wc命令（word count）"></a>wc命令（word count）</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><p>出现的东西（不加任何的东西），第一个为行数，第二个为单词数量，第三个为字节数</p><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><p>相当于printf</p><h2 id="96-反引号"><a href="#96-反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><p>一般和上面的配合使用</p><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器（visual-interface）"><a href="#vi编辑器（visual-interface）" class="headerlink" title="vi编辑器（visual interface）"></a>vi编辑器（visual interface）</h2><h3 id="命令模式快捷键（command-mode）"><a href="#命令模式快捷键（command-mode）" class="headerlink" title="命令模式快捷键（command mode）"></a>命令模式快捷键（command mode）</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键（Last-line-mode）"><a href="#底线命令快捷键（Last-line-mode）" class="headerlink" title="底线命令快捷键（Last line mode）"></a>底线命令快捷键（Last line mode）</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="root用户"><a href="#root用户" class="headerlink" title="root用户"></a>root用户</h1><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>普通用户转到root用户需要su <code>[-]  [用户名]</code>这里的root可以不写，就是默认root</p><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>sudo为普通的命令授权，临时以root身份运行</p><p>语法：</p><p>sudo <code>其他命令</code></p><p>但是这里我们需要注意的是</p><p>我们得先为普通用户配置sudo认证。方式如下</p><ol><li><p>进入root用户</p></li><li><p>输入visudo或者是vi etc&#x2F;sudoers</p></li><li><p>进入之后到最后输入  用户名  ALL&#x3D;(ALL) NOPASSWD: ALL  例如 ：Amireux  ALL&#x3D;(ALL) NOPASSWD: ALL</p></li><li><p>保存退出（按esc之后，再按<code>:</code>,接着输入wq）</p></li></ol><h1 id="用户组管理-（需要root）"><a href="#用户组管理-（需要root）" class="headerlink" title="用户组管理 （需要root）"></a>用户组管理 （需要root）</h1><h2 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h2><p>语法：groupadd 用户组名</p><h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><p>语法：groupdel 用户组名</p><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>userdd [-g -d]用户名</p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>userdel [-r] 用户名</p><h2 id="查看用户所属组"><a href="#查看用户所属组" class="headerlink" title="查看用户所属组"></a>查看用户所属组</h2><p>id[用户名]</p><h2 id="修改用户所属组"><a href="#修改用户所属组" class="headerlink" title="修改用户所属组"></a>修改用户所属组</h2><p>usermod -aG 用户组，用户名</p><h1 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h1><p>我们可以使用chmod命令，修改文件、文件夹的权限信息</p><p>注意：只有文件，文件夹的所属用户或root用户可以修改。</p><p>语法：<code>chmod [-R] 权限  文件或文件名</code></p><p><code>-R</code>,对文件内的全部内容进行修改</p><p>r:read(读)</p><p>w:write(写)</p><p>x:exe(执行)</p><p>示例：</p><ul><li>chmod u&#x3D;rwx，g&#x3D;rx,o&#x3D;x hello.txt  表示将文件权限修改为:rwxr–x–x  其中：u表示user所属用户权限，g表示group组权限用户，o表示other其他用户权限</li></ul><p>我们可以用数字来表示</p><ul><li><p>0：—</p></li><li><p>1：–x</p></li><li><p>2:-w-</p></li><li><p>3:-wx</p></li><li><p>4:r–</p></li><li><p>5:r-x</p></li><li><p>6:rw-</p></li><li><p>7:rwx</p></li></ul><p><code>上面是二进制</code></p><h1 id="chomd命令（change-owner）"><a href="#chomd命令（change-owner）" class="headerlink" title="chomd命令（change owner）"></a>chomd命令（change owner）</h1><p><code>普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行</code></p><p>语法：chown[-R] [ 用户 ] [ : ] [ 用户组 ] 文件或文件夹</p><p>选项：-R，同chmod，对文件夹内全部内容应用相同规则</p><p>选项：用户，修改所属用户</p><p>选项：用户组，修改所属用户组</p><p>其中<code>:</code> 用来分隔用户和用户组</p><p>示例：</p><p>chown root hello.txt 将hello.txt所属用户修改为root</p><p>chown ：root hello.txt 将hello.txt所属用户组修改为root</p><p>chown root：Amireux hello.txt 将hello.txt所属用户修改为root，用户组修改成为Amireux</p><p>chown -R root test 将文件夹test的所属用户修改为root并对文件夹内全部内容应用相同的规则</p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="各类小技巧"><a href="#各类小技巧" class="headerlink" title="各类小技巧"></a>各类小技巧</h2><ol><li><p>ctrl+c    强制停止</p></li><li><p>ctrl+d   退出或登出            ps：不能用于vi&#x2F;vim    （输入python就能进入python解释器）</p></li><li><p>history  历史命令（这里可以用grep过滤）</p></li><li><p><code>!</code>+命令前缀，自动执行山鬼此匹配前缀的（从下向上）</p></li><li><p>ctrl+r  输入内容去匹配历史命令</p><p>注意：</p><p>回车键可以直接执行</p><p>键盘左右键，可以得到此命令（不执行）</p><ol><li>ctrl+a跳到命令开头</li></ol></li><li><p>ctrl+e跳到命令结尾</p></li><li><p>ctrl+键盘左键，向左跳一个单词</p></li><li><p>ctrl+键盘右键，向右跳一个单词</p></li><li><p>ctrl+l        清屏</p></li><li><p>clear  效果同上</p></li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><p>服务名：</p><ul><li>firewalld  防火墙</li><li>NetworkManager  主网络服务</li><li>network  副网络服务</li><li>firewalld 防火墙服务</li><li>sshd   ssh服务</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><p>如果不能用上面的命令，需要先安装一下</p><p>命令：<code>yum -y install net-tools</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h1 id="自行设置环境变量"><a href="#自行设置环境变量" class="headerlink" title="自行设置环境变量"></a>自行设置环境变量</h1><p>1.临时设置：</p><p>语法：export 变量名&#x3D;变量值</p><p>2.永久生效</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令-1"><a href="#chmod命令-1" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Linux基础命令&quot;&gt;&lt;a href=&quot;#Linux基础命令&quot; class=&quot;headerlink&quot; title=&quot;Linux基础命令&quot;&gt;&lt;/a&gt;Linux基础命令&lt;/h1&gt;</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>0-1背包问题</title>
    <link href="http://example.com/posts/41884/"/>
    <id>http://example.com/posts/41884/</id>
    <published>2023-06-11T15:10:08.000Z</published>
    <updated>2023-07-22T08:58:06.542Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>本人三本菜鸡，在大一的时候，室友选c++期末大作业选的正好是这个，当时也在网上找了一下这个算法的相关代码，但是看不懂。后来自学算法的时候学到了动态规划，正好遇到了这个题，可是时过半年，还是没有明白这个动态规划，或者是说明白了思想，但是不会写代码。后来因为要准备蓝桥杯了（因为学校没有ACM队），所以还是强迫自己弄明白这个，看了很多视频，绕了很多弯路，最后终于明白了这题。因为淋过雨，所以更懂得为别人撑伞，这也是我写这篇文章的原因。</p></blockquote><span id="more"></span><p><strong>下面进入正题：</strong></p><p>0-1背包问题是最经典的dp（动态规划）问题，但是拿它当dp入门感觉还是有点难。而且这个名字经常会误导一些人，有些人看到题目里出现背包二字，就觉得这题是dp问题，实际上dp是一类问题，这类问题往往是在某种条件下找到最优解。</p><p>关于这类解，我们需要按照下面的思路：</p><h3 id="1-怎么表示当前的状态"><a href="#1-怎么表示当前的状态" class="headerlink" title="1.怎么表示当前的状态"></a>1.怎么表示当前的状态</h3><h3 id="2-状态转移方程是什么"><a href="#2-状态转移方程是什么" class="headerlink" title="2.状态转移方程是什么"></a>2.状态转移方程是什么</h3><h3 id="3-时间复杂度能否满足"><a href="#3-时间复杂度能否满足" class="headerlink" title="3.时间复杂度能否满足"></a>3.时间复杂度能否满足</h3><p>这里可以先看一下<a href="https://blog.csdn.net/m0_70182646/article/details/130301631?spm=1001.2014.3001.5501">点击这里</a>，感受一下动态规划的优点：<del>减少重复计算，降低时间复杂度</del> </p><p>那么接下来我们看看0-1背包问题怎么写呢？</p><h1 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 v<sub>i</sub>，价值是 w<sub>i</sub>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N行，每行两个整数 v<sub>i</sub>,w<sub>i</sub>用空格隔开，分别表示第 i 件物品的体积和价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示最大价值。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>0&lt;N,V≤1000</p><p>0&lt; v<sub>i</sub>,w<sub>i</sub>≤1000</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><blockquote><p>4 5<br>1 2<br>2 4<br>3 4<br>4 5</p></blockquote><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><blockquote><p>8</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我们可以看到数据为0~1000</p><p>如果用dfs的话，数据量是2<sup>1000</sup>,数据量大的惊人，如果没有时间限制，我们让计算机一直跑，肯定会出结果的（反正不是我跑）。但是作为小镇做题家，我们是有时间限制的，那么我们怎么做呢？</p><p>我们首先定义两个一维数组，分别为w [ ] ,V[ ];这两个数组分别代表价值（worth）和容量（volume）</p><p>那接下来按照我们上面写的思路：</p><h4 id="1：首先"><a href="#1：首先" class="headerlink" title="1：首先"></a>1：首先</h4><p>   我们怎么来表示当前的状态呢？我们先思考一下，我们每次选择物品都有两种选择，要么选要么不选。然后有什么限制条件呢？那当然是选的时候，我们得先看看容量够不够啦，容量不够，想放进去也放不进去QAQ。这里通过各位的一顿分析，可以知道有两个变量，也就是</p><blockquote><p>1：选或不选</p><p>2：选了容量够不够</p></blockquote><p>这时候我们就可以用一个二维数组来表示一下当前的状态。</p><p>我们用dp[i][j]来表示当判断到第i个的时候，我们剩余j个容量，这时候dp[i][j]代表的是这时候我们背包里面物品里面的最大价值。</p><h4 id="2：其次"><a href="#2：其次" class="headerlink" title="2：其次"></a>2：其次</h4><p>我们该思考一下转移状态方程啦。那我们思考一下状态转移方程是什么呢？我们很容易想到我们判断第i个物品的时候，前i-1个物品我们都判断过了，这时候第i个物品有两种选择</p><blockquote><p>1：不选</p><p>2：选</p></blockquote><p>那么我们接下来看一下</p><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><p>也就是不选的情况，不选的话，我们当前的背包的容量和背包里面物品的价值都不会变，也就是</p><blockquote><p>dp[i][j]&#x3D;dp[i-1][j];</p></blockquote><h5 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h5><p>也就是选的情况，选的时候我们得先看看这个背包够不够格对吧，那么我们就需要检查一下背包的容量，背包的容量上面我们定义的是dp[i][j]中的j的值，这时候我们判断的条件是什么呢？很明显就是第i个物品的重量和这时候背包的容量j相比较，如果当前背包的剩余容量可以装下这个物品，也就是j&gt;v[i]，这时候我们就可以将它装入了，装入之后我们的体积就需要减少v[i]，剩余容量为j-v[i]。这时候价值为dp[i][j]+w[i]。这时候转移方程为</p><blockquote><p>dp[i][j]&#x3D;dp[i][j-v[i]]+w[i];</p></blockquote><p>到这里就完了嘛？不，还没有完，我们再继续思考一下，貌似有好多种不同的选择方法会走到dp[i][j]这一步，那么我们怎么办呢，当然是取最优的啦，也就是</p><blockquote><p>dp[i][j]&#x3D;max(dp[i][j],dp[i-1][j-v[i]]+w[i]);</p></blockquote><p>最后我们考虑一下时间复杂度是多少呢？很明显是O（m*n）。我们看一下给的数据最大为1000，当m和n取最大值的话，最大的时间复杂度也只是10<sup>6</sup>，完全满足题目给的要求。</p><p>下面我们附上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心代码就是</p><blockquote><p>dp[i][j]&#x3D;dp[i-1][j];<br>if(j&gt;&#x3D;v[i])dp[i][j]&#x3D;max(dp[i][j],dp[i-1][j-v[i]]+w[i]);</p></blockquote><p>那么我们能否再将代码进行优化呢？</p><p>答案是<strong>可以</strong>的，我们可以进行一边输入一边处理。</p><p>那么我们又回到了最上面的步骤，既然说了可以优化，那么我们怎么优化呢？我们可以发现上面有一段循环是多余的，就是j在0到v[i]是多余的，这个我们就是处于待优化的状态。既然这一段循环是多余的，那么dp[i][0]~dp[i][v[i]]这段空间我们也可以优化掉，那我们接下来就开始优化啦！</p><h5 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h5><p>我们想一想这个状态怎么表示呢？我们想到每次输入的时候，这时候只和当前的输入的重量和体积有关，和当前是第多少个物体没有关系，所以我们可以优化掉i的那一层，也就是只用一个一维数组来维护一下当前的状态。也就是dp[j]。那么其中j和dp[j]的含义是什么呢？我们可以思考一下，我们当前只有两个变量，分别是背包的剩余容量和背包的价值，那么根据上面的思路可得，j代表的是当前背包的容量，dp[j]是当前背包的价值。</p><p>状态表示有了，<strong>状态转移方程是什么呢</strong>？我们可以想到上面我们说的，”那么dp[i][0]~dp[i][v[i]]这段空间我们也可以优化掉”  这句话，那么我们怎么优化掉呢？我们只需要对大于当前的价值的dp进行处理，怎么处理呢？</p><p>还是有两种情况：</p><blockquote><p>1：不选</p><p>2：选</p></blockquote><p>那么这和上面的代码的核心代码差不多，只需要将上面的核心的代码的i给删掉就行了，也就是</p><blockquote><p>dp[j]&#x3D;max(dp[j]，dp[j-v]+w);</p></blockquote><p>最后我们思考一下该代码的时间复杂度是多少呢？很明显是小于O(n<em>m)的，上面的O(n</em>m)都行，那这个代码更行了。同时这段代码优化了一层，空间复杂度由原来的O(n<sup>2</sup>)变成了O(n)，直接降了一个度。</p><p>代码奉上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="comment">//定义状态dp[i]就是重量为i，价值为dp[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v,w;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=M;j&gt;=v;--j)</span><br><span class="line">         dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[M]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为到这里就完了吗？错啦，这里有个我们需要思考的地方，为什么j从m到v，而不是v到m呢？这里就需要读者自己思考啦。</p><p><strong>提示：</strong><br>如果从v到m的话，如果先更新dp[v]的话，dp[v]的值可能会变，然后如果更新dp[v+v]的话可能会重复计算，就提示到这啦，剩下的只能靠读者去悟啦！</p><p>如果实在不懂的话我举个例子：</p><blockquote><p>假设有三件物品，背包最大容量为2，价值分别为1，2，3，而它们的体积都是1，这时候我们知道最大价值为3+2&#x3D;5，而如果j从v到m的话，最后得出来的结果是6，这里需要读者自己模拟一下啦！</p></blockquote><p>至此，本菜鸡花两个小时写的0-1背包问题到此结束！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人三本菜鸡，在大一的时候，室友选c++期末大作业选的正好是这个，当时也在网上找了一下这个算法的相关代码，但是看不懂。后来自学算法的时候学到了动态规划，正好遇到了这个题，可是时过半年，还是没有明白这个动态规划，或者是说明白了思想，但是不会写代码。后来因为要准备蓝桥杯了（因为学校没有ACM队），所以还是强迫自己弄明白这个，看了很多视频，绕了很多弯路，最后终于明白了这题。因为淋过雨，所以更懂得为别人撑伞，这也是我写这篇文章的原因。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://example.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>GitStudy</title>
    <link href="http://example.com/posts/24787/"/>
    <id>http://example.com/posts/24787/</id>
    <published>2023-05-19T07:39:28.000Z</published>
    <updated>2023-08-01T08:59:24.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>提示：今天看到某东实习需要熟悉git相关操作，加油！！！</code></p><span id="more"></span><p><code>提示：以下是本篇文章正文内容</code></p><h1 id="1、git环境配置"><a href="#1、git环境配置" class="headerlink" title="1、git环境配置"></a>1、git环境配置</h1><h2 id="1-1-下载与安装"><a href="#1-1-下载与安装" class="headerlink" title="1.1 下载与安装"></a>1.1 下载与安装</h2><p>下载地址：<a href="https://git-scm.com/download">点击这里</a><br>接着根据你的实际情况下载相应的版本<br><img src="/posts/24787/ecd7452fd93245b39234798ff81fe05c.png" alt="在这里插入图片描述"></p><p>安装完成之后会有一个这个：<br><img src="/posts/24787/59cd44dacf914509923caebd8b989c56.png" alt="在这里插入图片描述"></p><p>双击之后：</p><ol><li><p>按照附件的 顺序直接下一步傻瓜式安装即可</p></li><li><p>其中安装的过程中需要填写一个邮箱和用户名(任意即可)</p></li><li><p>$\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$</p></li></ol><p>安装好了之后，我们：右键-&gt;显示更多选项，检查一下电脑上是否有这两个选项<br><img src="/posts/24787/cf1e89bb719b4af193f4564da63dd723.png" alt="在这里插入图片描述"><br>如果有说明配置好了</p><h2 id="1-2基本配置"><a href="#1-2基本配置" class="headerlink" title="1.2基本配置"></a>1.2基本配置</h2><p> 1.打开Git Bash<br> 2.设置用户信息<br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></p><p><code>注意上面名字前面一定要加空格哟！！！</code><br>查看配置信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="1-3解决GitBash乱码问题"><a href="#1-3解决GitBash乱码问题" class="headerlink" title="1.3解决GitBash乱码问题"></a>1.3解决GitBash乱码问题</h2><p>1.打开GitBash执行下面命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><p>2.git_home&#x2F;etc&#x2F;bash.bashrc 文件最后加入下面两行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">export LC_ALL=&quot;zh_CN.UTF-8&quot;</span><br></pre></td></tr></table></figure><p><code>注意的是上面的方法能解决大部分的问题，但是还是有小部分的不能解决</code></p><h1 id="2-git常用命令"><a href="#2-git常用命令" class="headerlink" title="2.git常用命令"></a>2.git常用命令</h1><p><code>这里的git命令例子都是在Git Bash中演示的，会用的一些基本的linux命令</code><br>1.创建文件 : </p><blockquote><p>touch filename.filetype</p></blockquote><p>2.清除屏幕</p><blockquote><p>clear</p></blockquote><p>3.删除</p><blockquote><p>rm filename</p></blockquote><h1 id="3-获取本地仓库"><a href="#3-获取本地仓库" class="headerlink" title="3.获取本地仓库"></a>3.获取本地仓库</h1><p>首先我们得参加创建一个空的目录，过程如下：</p><p> 1）在电脑的任意位置创建一个空目录（例如test)作为我们的本地Git仓库<br> <code>注意: 不要直接在桌面上操作,否则桌面就是一个仓库</code><br> 2）进入这个目录中，点击右键打开Git bash窗口<br> 3）执行下面的命令</p><blockquote><p>git init</p></blockquote><p>4）如果创建成功后可在文件夹下看到<strong>隐藏的</strong>.git目录。<br><img src="/posts/24787/1cab696373b64684a16c250f6d798ac0.png" alt="在这里插入图片描述"></p><h1 id="4-基础操作指令"><a href="#4-基础操作指令" class="headerlink" title="4.基础操作指令"></a>4.基础操作指令</h1><p>首先我们需要明白三个状态<br><img src="/posts/24787/65d98e4caefc47a7821b4a409822b445.png" alt="在这里插入图片描述"></p><h2 id="4-1查看修改的状态"><a href="#4-1查看修改的状态" class="headerlink" title="4.1查看修改的状态"></a>4.1查看修改的状态</h2><p><code>作用:查看的修改的状态（暂存区，工作区）</code><br>命令形式</p><blockquote><p>git status</p></blockquote><h2 id="4-2添加工作区到暂存区"><a href="#4-2添加工作区到暂存区" class="headerlink" title="4.2添加工作区到暂存区"></a>4.2添加工作区到暂存区</h2><p>作用:添加工作区一个或多个文什的修改到哲存区</p><p>命令形式</p><blockquote><p>git add filename.filetype</p></blockquote><p>还有另外一种形式是</p><blockquote><p>git add .</p></blockquote><p>这里的 **”.”**代表的是通配符</p><h2 id="4-3提交暂存区到本地仓库"><a href="#4-3提交暂存区到本地仓库" class="headerlink" title="4.3提交暂存区到本地仓库"></a>4.3提交暂存区到本地仓库</h2><p>作用:提交暂存区内容到本地仓库的当前分支<br>命令形式</p><blockquote><p>git commit -m “这里可以写注释”</p></blockquote><h2 id="4-4查看提交日志"><a href="#4-4查看提交日志" class="headerlink" title="4.4查看提交日志"></a>4.4查看提交日志</h2><p>作用：查看提交记录<br>命令形式</p><blockquote><p>git log [option]</p></blockquote><p>option:</p><ol><li>–all 显示所有分支</li><li>–pretty&#x3D;oneline 将提交信息显示为一行</li><li>–abbrev-commit 使得输出的commitld更简短</li><li>–graph 以图的形式显示<br><code>注意上面前面是两个‘-’号</code></li></ol><h2 id="4-5、版本回退"><a href="#4-5、版本回退" class="headerlink" title="4.5、版本回退"></a>4.5、版本回退</h2><p>作用:版本切换<br>命令形式:</p><blockquote><p>git reset –hard commitlD</p></blockquote><p> commitlD可以使用下面这个指令查看</p><blockquote><p>git log</p></blockquote><p>如何查看已经删除的记录?</p><blockquote><p>git reflog</p></blockquote><p>这个指令可以看到已经删除的提交记录</p><h1 id="5-分支"><a href="#5-分支" class="headerlink" title="5.分支"></a>5.分支</h1><h2 id="5-1查看本地分支"><a href="#5-1查看本地分支" class="headerlink" title="5.1查看本地分支"></a>5.1查看本地分支</h2><ul><li>命令：git branch</li></ul><h2 id="5-2创建本地分支"><a href="#5-2创建本地分支" class="headerlink" title="5.2创建本地分支"></a>5.2创建本地分支</h2><ul><li>命令：git branch 分支名</li></ul><h2 id="5-3切换分支"><a href="#5-3切换分支" class="headerlink" title="5.3切换分支"></a>5.3切换分支</h2><ul><li>命令：git checkout  分支名</li></ul><p>我们还可以切换到一个不存在的分支（创建并切换）</p><ul><li>命令：git checkout -b 分支名</li></ul><h2 id="5-4合并分支"><a href="#5-4合并分支" class="headerlink" title="5.4合并分支"></a>5.4合并分支</h2><p>一个分支的提交可以合并到另外一个分支</p><ul><li>命令：git merge 分支名称</li></ul><h2 id="5-5删除分支"><a href="#5-5删除分支" class="headerlink" title="5.5删除分支"></a>5.5删除分支</h2><p><strong>不能删除当前分支，只能删除其他分支</strong></p><ul><li>git branch -d b1 删除分支时，需要做各种检查</li><li>git branch -D b1 不做任何检查，强制删除</li></ul><h2 id="5-6解决冲突"><a href="#5-6解决冲突" class="headerlink" title="5.6解决冲突"></a>5.6解决冲突</h2><p><strong>冲突描述：</strong><br>假设A修改了test01.txt文件里面的内容<br>而B在这个时候也修改了test01.txt文件里面的内容<br>两人提交之后，都没有问题<br>但是当两个分支合并了之后，git不知道听A的还是B的<br>解决冲突步骤如下</p><ul><li>1.处理文件中冲突的地方</li><li>2.将解决完冲突的文件加入暂存区(add)</li><li>3.提交到仓库(commit)</li></ul><h2 id="5-7开发中分支使用原则与流程"><a href="#5-7开发中分支使用原则与流程" class="headerlink" title="5.7开发中分支使用原则与流程"></a>5.7开发中分支使用原则与流程</h2><p>几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。<br>在开发中，一般有如下分支使用原则与流程:</p><ul><li>master(生产)分支<br>线上分支，主分支，中小规模项目作为线上运行的应用对应的分支</li><li>develop (开发)分支<br>是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支,准备上线。</li><li>feature&#x2F;xxxx分支<br>从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支。</li><li>hotfix&#x2F;xxxx分支，<br>从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。·还有一些其他分支，在此不再详述，例如test分支(用于代码测试)、pre分支(预上线分支)等等。</li></ul><h1 id="6-git远程仓库"><a href="#6-git远程仓库" class="headerlink" title="6.git远程仓库"></a>6.git远程仓库</h1><h2 id="6-1注册账号"><a href="#6-1注册账号" class="headerlink" title="6.1注册账号"></a>6.1注册账号</h2><p><a href="https://gitee.com/signup">https://gitee.com/signup</a><br>这里就不多赘述了<br>创建好了之后我们点击右上角的仓库创建<br><img src="/posts/24787/13ad018885f34e668a446a8b80b199cb.png" alt="在这里插入图片描述"></p><p>注意这里只填写仓库名称和路径以及介绍，剩下的都不用管了</p><p>接下来转到gitBash命令里面输入</p><blockquote><p>ssh-keygen -t rsa</p></blockquote><p>接着不断点击回车就行了</p><p><strong>这个操作是生成ssh公钥的</strong></p><p>接着我们查看公钥<br>输入指令</p><blockquote><p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p></blockquote><p>接着下面出来的就是公钥密码了</p><p>然后我们转到gitee<br><img src="/posts/24787/64c8a907a0994dd89d92f78ad8107f27.png" alt="在这里插入图片描述"></p><p>接着将公钥粘贴进去就行了<br>接着我们输入</p><blockquote><p>ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x65;&#x65;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#x65;&#x65;&#46;&#x63;&#x6f;&#x6d;</a></p></blockquote><p>测试一下链接，第一次链接会出现下面这个，我们输入yes就行了。下面就是代表连接成功的标准</p><p><img src="/posts/24787/4174e790c72a4e318357631009a98a69.png" alt="在这里插入图片描述"></p><h2 id="6-2添加远程仓库"><a href="#6-2添加远程仓库" class="headerlink" title="6.2添加远程仓库"></a>6.2添加远程仓库</h2><p><strong>命令：</strong></p><ul><li>git remote add &lt;远端名称&gt; &lt;你上面复制的地址&gt;</li><li>远端名称，默认是origin，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL</li></ul><p>我们点击我们的仓库之后进入<br><img src="https://img-blog.csdnimg.cn/8983b523534f46198ee9fad979294656.png" alt="在这里插入图片描述"><br>然后复制ssh的地址.</p><p>接着输入</p><blockquote><p>git remote add origin 你上面复制的地址</p></blockquote><p>如果没有任何提示说明成功了</p><h2 id="6-3查看远程仓库"><a href="#6-3查看远程仓库" class="headerlink" title="6.3查看远程仓库"></a>6.3查看远程仓库</h2><p>命令</p><blockquote><p>git remote </p></blockquote><h2 id="6-4推送到远程仓库"><a href="#6-4推送到远程仓库" class="headerlink" title="6.4推送到远程仓库"></a>6.4推送到远程仓库</h2><p>命令: git push $ [-f] [–set-upstream][远端名称[本地分支名][:远端分支名]]</p><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支:</li></ul><blockquote><p>git push origin master</p></blockquote><ul><li><p>-f表示强制覆盖</p></li><li><p><code>--set-upstream</code>推送到远端的同时并且建立起和远端分支的关联关系。<code>git push --set-upstream origin master</code></p></li><li><p>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。</p></li><li><p>git push将master分支推送到已关联的远端分支。</p></li></ul><h2 id="6-5本地分支与远程分支的关联关系"><a href="#6-5本地分支与远程分支的关联关系" class="headerlink" title="6.5本地分支与远程分支的关联关系"></a>6.5本地分支与远程分支的关联关系</h2><ul><li>查看关联关系我们可以用下面这个命令<blockquote><p>git branch -vv</p></blockquote></li></ul><h2 id="6-6从远程仓库克隆"><a href="#6-6从远程仓库克隆" class="headerlink" title="6.6从远程仓库克隆"></a>6.6从远程仓库克隆</h2><p>如果已经有一个远程仓库，我们可以直接clone到本地<br>命令如下</p><blockquote><p>git clone &lt;仓库路径&gt; &lt;本地目录&gt;</p></blockquote><p>如果不写本地路径，它将会取仓库路径的最后几个字符作为名字</p><p><code>注意这里的仓库路径是你从云端复制的ssh地址</code><br><code>注意这里的本地路径是你从哪里打开GitBash的路径</code></p><h2 id="6-7从远程仓库抓取和拉取"><a href="#6-7从远程仓库抓取和拉取" class="headerlink" title="6.7从远程仓库抓取和拉取"></a>6.7从远程仓库抓取和拉取</h2><ul><li>抓取命令: git fetch [remote name] [branch name]</li><li>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并。如果不指定远端名称和分支名，则抓取所有分支。</li><li>拉取命令: git pull [remote name] [branch name]</li><li>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+merge。如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul><h2 id="7-在idea中使用Git"><a href="#7-在idea中使用Git" class="headerlink" title="7.在idea中使用Git"></a>7.在idea中使用Git</h2><p>首先打开idea中的setting，接着输入git，一般这里会自动识别这个git的路径，如果不知道可以手动导入一下。<br><img src="/posts/24787/367562fad3d84bc980f4a2458de2a1cf-1690880360269-19.png" alt="在这里插入图片描述"></p><p><strong>未完待续….</strong></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;提示：今天看到某东实习需要熟悉git相关操作，加油！！！&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>instructions</title>
    <link href="http://example.com/posts/62888/"/>
    <id>http://example.com/posts/62888/</id>
    <published>2023-04-19T12:57:26.000Z</published>
    <updated>2023-08-01T09:39:04.792Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新建文章的命令为</span><br><span class="line">hexo new post articleName</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">删除已有静态文件：hexo c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重新生成静态文件：hexo g</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启动本地端口查看效果：hexo s</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重新部署：hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><video src="https://www.bilibili.com/video/BV1wu411V7Ft/?spm_id_from=333.999.0.0&vd_source=207ff8602bcdef676a2c995169442e82" autoplay="autoplay" type="video/mp4" controls="controls" width="100%" height="100%"></video></p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;新建文章的命令为&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hexo new post articleName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="杂记" scheme="http://example.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>冶炼金属</title>
    <link href="http://example.com/posts/8879/"/>
    <id>http://example.com/posts/8879/</id>
    <published>2023-04-16T08:09:24.000Z</published>
    <updated>2023-07-22T08:59:13.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">小蓝有一个神奇的炉子用于将普通金属 O冶炼成为一种特殊金属 X。</span><br><span class="line"></span><br><span class="line">这个炉子有一个称作转换率的属性 V，V是一个正整数，这意味着消耗 V  个普通金属 O  恰好可以冶炼出一个特殊金属 X ，当普通金属 O  的数目不足 V  时，无法继续冶炼。</span><br><span class="line"></span><br><span class="line">现在给出了 N  条冶炼记录，每条记录中包含两个整数 A  和 B ，这表示本次投入了 A  个普通金属 O ，最终冶炼出了 B  个特殊金属 X 。</span><br><span class="line"></span><br><span class="line">每条记录都是独立的，这意味着上一次没消耗完的普通金属 O  不会累加到下一次的冶炼当中。</span><br><span class="line"></span><br><span class="line">根据这 N  条冶炼记录，请你推测出转换率 V  的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出两个整数，分别表示 V  可能的最小值和最大值，中间用空格分开。</span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于 30% 的评测用例，1≤N≤10^2。</span><br><span class="line">对于 60% 的评测用例，1≤N ≤10^3。</span><br><span class="line">对于 100% 的评测用例，1≤N ≤10^4，1≤B≤A ≤10^9。</span><br></pre></td></tr></table></figure><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">75 3</span><br><span class="line">53 2</span><br><span class="line">59 2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 25</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 当 V =20 时，有：⌊75/20⌋=3，⌊53/20⌋=2，⌊59/20⌋=2，可以看到符合所有冶炼记录。</span><br><span class="line"></span><br><span class="line">当 V=25 时，有：⌊75/25⌋=3，⌊53/25⌋=2，⌊59/25⌋=2，可以看到符合所有冶炼记录。</span><br><span class="line"></span><br><span class="line">且再也找不到比 20 更小或者比 25 更大的符合条件的 V 值了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> r=<span class="number">2e9</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        r=<span class="built_in">min</span>(r,a/b),l=<span class="built_in">max</span>(l,a/(b+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">解题思路：</span><br><span class="line"></span><br><span class="line">我们已知转化率为V，则a个金属O可以冶炼成为b个金属X(这时候多余的废料肯定在0~V之间)。换句话来说，炼制b个金属X最少需要消耗b*v，那么就有b*V≤a</span><br><span class="line"></span><br><span class="line">由于a个金属O只能冶炼成为b个金属X，冶炼不出来b+1个金属X，则a&lt;(b+1)*V</span><br><span class="line"></span><br><span class="line">那么我们整理一下就得到一个不等式，也就是</span><br><span class="line"></span><br><span class="line">b*V≤a&lt;(b+1)*V</span><br><span class="line"></span><br><span class="line">整理一下我们最后得到的不等式为</span><br><span class="line"></span><br><span class="line">a/(b+1) &lt;V ≤a/b</span><br><span class="line"></span><br><span class="line">这里我们需要知道V的最小应该为(a/(b+1))+1,因为a/(b+1)&lt;V,而不是a/(b+1)≤V。</span><br><span class="line">那么接下来该写代码，我们需要定义左右边界，也就是l，r。我们需要初始化l和r，为了保证我们的初始化有效，我们需要将l初始化成为无穷大，r初始化成为无穷小。然后我们需要将左边的边界不断向符合条件的左边界的最右边逼近，意思就是所有的左边界里面最大的，而右边界和左边界完全相反，是所有的右边界里面最小的。</span><br><span class="line">这一步骤也就是代码段里面的</span><br><span class="line"> r=min(r,a/b),l=max(l,a/(b+1)+1);</span><br><span class="line">等所有的循环完了之后再把l和r输出就行了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解题思路-二分"><a href="#解题思路-二分" class="headerlink" title="解题思路(二分)"></a>解题思路(二分)</h3><pre><code>代码如下</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a/mid&gt;b) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> r=<span class="number">2e9</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        r=<span class="built_in">min</span>(r,<span class="built_in">get</span>(a,b<span class="number">-1</span>)<span class="number">-1</span>);</span><br><span class="line">        l=<span class="built_in">max</span>(l,<span class="built_in">get</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">本题和上面的数学的解法唯一的区别就是</span><br><span class="line">数学解法这里是</span><br><span class="line">  r=min(r,a/b),l=max(l,a/(b+1)+1);</span><br><span class="line">而二分的是</span><br><span class="line">r=min(r,get(a,b-1)-1);</span><br><span class="line">l=max(l,get(a,b));</span><br><span class="line"></span><br><span class="line">对于get(int a,int b)函数的整体的思路是先抄一下二分的模板，再分析一下当mid满足的时候，是l=mid+1还是r=mid。</span><br><span class="line">我们这里进行分析</span><br><span class="line">当a/mid&gt;b时，说明当前的转化率mid符合条件，我们需要将左边界移动到mid+1(因为mid符合条件，所以我们需要将左边界移动到mid+1)，最后我们返回的r就是需要答案。</span><br></pre></td></tr></table></figure><h3 id="最后写一下我在比赛写的垃圾的TLE代码"><a href="#最后写一下我在比赛写的垃圾的TLE代码" class="headerlink" title="最后写一下我在比赛写的垃圾的TLE代码"></a>最后写一下我在比赛写的垃圾的TLE代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a,b,r;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;p[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"> <span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;r&gt;<span class="number">0</span>;--r)</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    <span class="keyword">if</span>(p[i].x/r!=p[i].y)</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    cin&gt;&gt;n; </span><br><span class="line">    <span class="type">int</span> r=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">        r=<span class="built_in">min</span>(r,p[i].x/p[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">check</span>(r)+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/m0_70182646/article/details/130115548">https://blog.csdn.net/m0_70182646/article/details/130115548</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;小蓝有一个神奇的炉子用于将普通金属 O冶炼成为一种特殊金属 X。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这个炉子有一个称作转换率的属性 V，V是一个正整数，这意味着消耗 V  个普通金属 O  恰好可以冶炼出一个特殊金属 X ，当普通金属 O  的数目不足 V  时，无法继续冶炼。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;现在给出了 N  条冶炼记录，每条记录中包含两个整数 A  和 B ，这表示本次投入了 A  个普通金属 O ，最终冶炼出了 B  个特殊金属 X 。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;每条记录都是独立的，这意味着上一次没消耗完的普通金属 O  不会累加到下一次的冶炼当中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;根据这 N  条冶炼记录，请你推测出转换率 V  的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="algorithm" scheme="http://example.com/categories/algorithm/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Amireux&#39;s</title>
  
  <subtitle>a rubbishman</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-06-12T10:08:54.769Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Amireux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0-1背包问题</title>
    <link href="http://example.com/posts/41884/"/>
    <id>http://example.com/posts/41884/</id>
    <published>2023-06-11T15:10:08.000Z</published>
    <updated>2023-06-12T10:08:54.769Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言：</strong></p><blockquote><p>本人三本菜鸡，在大一的时候，室友选c++期末大作业选的正好是这个，当时也在网上找了一下这个算法的相关代码，但是看不懂。后来自学算法的时候学到了动态规划，正好遇到了这个题，可是时过半年，还是没有明白这个动态规划，或者是说明白了思想，但是不会写代码。后来因为要准备蓝桥杯了（因为学校没有ACM队），所以还是强迫自己弄明白这个，看了很多视频，绕了很多弯路，最后终于明白了这题。因为淋过雨，所以更懂得为别人撑伞，这也是我写这篇文章的原因。</p></blockquote><p><strong>下面进入正题：</strong></p><p>0-1背包问题是最经典的dp（动态规划）问题，但是拿它当dp入门感觉还是有点难。而且这个名字经常会误导一些人，有些人看到题目里出现背包二字，就觉得这题是dp问题，实际上dp是一类问题，这类问题往往是在某种条件下找到最优解。</p><p>关于这类解，我们需要按照下面的思路：</p><h3 id="1-怎么表示当前的状态"><a href="#1-怎么表示当前的状态" class="headerlink" title="1.怎么表示当前的状态"></a>1.怎么表示当前的状态</h3><h3 id="2-状态转移方程是什么"><a href="#2-状态转移方程是什么" class="headerlink" title="2.状态转移方程是什么"></a>2.状态转移方程是什么</h3><h3 id="3-时间复杂度能否满足"><a href="#3-时间复杂度能否满足" class="headerlink" title="3.时间复杂度能否满足"></a>3.时间复杂度能否满足</h3><p>这里可以先看一下<a href="https://blog.csdn.net/m0_70182646/article/details/130301631?spm=1001.2014.3001.5501">点击这里</a>，感受一下动态规划的优点：<del>减少重复计算，降低时间复杂度</del> </p><p>那么接下来我们看看0-1背包问题怎么写呢？</p><h1 id="题目如下"><a href="#题目如下" class="headerlink" title="题目如下"></a>题目如下</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i 件物品的体积是 v<sub>i</sub>，价值是 w<sub>i</sub>。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N行，每行两个整数 v<sub>i</sub>,w<sub>i</sub>用空格隔开，分别表示第 i 件物品的体积和价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示最大价值。</p><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>0&lt;N,V≤1000</p><p>0&lt; v<sub>i</sub>,w<sub>i</sub>≤1000</p><h2 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h2><blockquote><p>4 5<br>1 2<br>2 4<br>3 4<br>4 5</p></blockquote><h2 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h2><blockquote><p>8</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我们可以看到数据为0~1000</p><p>如果用dfs的话，数据量是2<sup>1000</sup>,数据量大的惊人，如果没有时间限制，我们让计算机一直跑，肯定会出结果的（反正不是我跑）。但是作为小镇做题家，我们是有时间限制的，那么我们怎么做呢？</p><p>我们首先定义两个一维数组，分别为w [ ] ,V[ ];这两个数组分别代表价值（worth）和容量（volume）</p><p>那接下来按照我们上面写的思路：</p><h4 id="1：首先"><a href="#1：首先" class="headerlink" title="1：首先"></a>1：首先</h4><p>   我们怎么来表示当前的状态呢？我们先思考一下，我们每次选择物品都有两种选择，要么选要么不选。然后有什么限制条件呢？那当然是选的时候，我们得先看看容量够不够啦，容量不够，想放进去也放不进去QAQ。这里通过各位的一顿分析，可以知道有两个变量，也就是</p><blockquote><p>1：选或不选</p><p>2：选了容量够不够</p></blockquote><p>这时候我们就可以用一个二维数组来表示一下当前的状态。</p><p>我们用dp[i][j]来表示当判断到第i个的时候，我们剩余j个容量，这时候dp[i][j]代表的是这时候我们背包里面物品里面的最大价值。</p><h4 id="2：其次"><a href="#2：其次" class="headerlink" title="2：其次"></a>2：其次</h4><p>我们该思考一下转移状态方程啦。那我们思考一下状态转移方程是什么呢？我们很容易想到我们判断第i个物品的时候，前i-1个物品我们都判断过了，这时候第i个物品有两种选择</p><blockquote><p>1：不选</p><p>2：选</p></blockquote><p>那么我们接下来看一下</p><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><p>也就是不选的情况，不选的话，我们当前的背包的容量和背包里面物品的价值都不会变，也就是</p><blockquote><p>dp[i][j]&#x3D;dp[i-1][j];</p></blockquote><h5 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h5><p>也就是选的情况，选的时候我们得先看看这个背包够不够格对吧，那么我们就需要检查一下背包的容量，背包的容量上面我们定义的是dp[i][j]中的j的值，这时候我们判断的条件是什么呢？很明显就是第i个物品的重量和这时候背包的容量j相比较，如果当前背包的剩余容量可以装下这个物品，也就是j&gt;v[i]，这时候我们就可以将它装入了，装入之后我们的体积就需要减少v[i]，剩余容量为j-v[i]。这时候价值为dp[i][j]+w[i]。这时候转移方程为</p><blockquote><p>dp[i][j]&#x3D;dp[i][j-v[i]]+w[i];</p></blockquote><p>到这里就完了嘛？不，还没有完，我们再继续思考一下，貌似有好多种不同的选择方法会走到dp[i][j]这一步，那么我们怎么办呢，当然是取最优的啦，也就是</p><blockquote><p>dp[i][j]&#x3D;max(dp[i][j],dp[i-1][j-v[i]]+w[i]);</p></blockquote><p>最后我们考虑一下时间复杂度是多少呢？很明显是O（m*n）。我们看一下给的数据最大为1000，当m和n取最大值的话，最大的时间复杂度也只是10<sup>6</sup>，完全满足题目给的要求。</p><p>下面我们附上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> dp[N][N];</span><br><span class="line"><span class="type">int</span> v[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的核心代码就是</p><blockquote><p>dp[i][j]&#x3D;dp[i-1][j];<br>if(j&gt;&#x3D;v[i])dp[i][j]&#x3D;max(dp[i][j],dp[i-1][j-v[i]]+w[i]);</p></blockquote><p>那么我们能否再将代码进行优化呢？</p><p>答案是<strong>可以</strong>的，我们可以进行一边输入一边处理。</p><p>那么我们又回到了最上面的步骤，既然说了可以优化，那么我们怎么优化呢？我们可以发现上面有一段循环是多余的，就是j在0到v[i]是多余的，这个我们就是处于待优化的状态。既然这一段循环是多余的，那么dp[i][0]~dp[i][v[i]]这段空间我们也可以优化掉，那我们接下来就开始优化啦！</p><h5 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h5><p>我们想一想这个状态怎么表示呢？我们想到每次输入的时候，这时候只和当前的输入的重量和体积有关，和当前是第多少个物体没有关系，所以我们可以优化掉i的那一层，也就是只用一个一维数组来维护一下当前的状态。也就是dp[j]。那么其中j和dp[j]的含义是什么呢？我们可以思考一下，我们当前只有两个变量，分别是背包的剩余容量和背包的价值，那么根据上面的思路可得，j代表的是当前背包的容量，dp[j]是当前背包的价值。</p><p>状态表示有了，<strong>状态转移方程是什么呢</strong>？我们可以想到上面我们说的，”那么dp[i][0]~dp[i][v[i]]这段空间我们也可以优化掉”  这句话，那么我们怎么优化掉呢？我们只需要对大于当前的价值的dp进行处理，怎么处理呢？</p><p>还是有两种情况：</p><blockquote><p>1：不选</p><p>2：选</p></blockquote><p>那么这和上面的代码的核心代码差不多，只需要将上面的核心的代码的i给删掉就行了，也就是</p><blockquote><p>dp[j]&#x3D;max(dp[j]，dp[j-v]+w);</p></blockquote><p>最后我们思考一下该代码的时间复杂度是多少呢？很明显是小于O(n<em>m)的，上面的O(n</em>m)都行，那这个代码更行了。同时这段代码优化了一层，空间复杂度由原来的O(n<sup>2</sup>)变成了O(n)，直接降了一个度。</p><p>代码奉上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N,M;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="comment">//定义状态dp[i]就是重量为i，价值为dp[i]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v,w;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=M;j&gt;=v;--j)</span><br><span class="line">         dp[j]=<span class="built_in">max</span>(dp[j],dp[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[M]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你以为到这里就完了吗？错啦，这里有个我们需要思考的地方，为什么j从m到v，而不是v到m呢？这里就需要读者自己思考啦。</p><p><strong>提示：</strong><br>如果从v到m的话，如果先更新dp[v]的话，dp[v]的值可能会变，然后如果更新dp[v+v]的话可能会重复计算，就提示到这啦，剩下的只能靠读者去悟啦！</p><p>如果实在不懂的话我举个例子：</p><blockquote><p>假设有三件物品，背包最大容量为2，价值分别为1，2，3，而它们的体积都是1，这时候我们知道最大价值为3+2&#x3D;5，而如果j从v到m的话，最后得出来的结果是6，这里需要读者自己模拟一下啦！</p></blockquote><p>至此，本菜鸡花两个小时写的0-1背包问题到此结束！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人三本菜鸡，在大一的时候，室友选c++期末大作业选的正好是这个，当时也在网上找了一下这个算法的相关代码，但是看不懂。后来自学算法的时候学到了动态规划，正好遇到了这个题，可是时过半年，还是没有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GitStudy</title>
    <link href="http://example.com/posts/24787/"/>
    <id>http://example.com/posts/24787/</id>
    <published>2023-05-19T07:39:28.000Z</published>
    <updated>2023-06-11T15:12:19.161Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span clas</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>instructions</title>
    <link href="http://example.com/posts/62888/"/>
    <id>http://example.com/posts/62888/</id>
    <published>2023-04-19T12:57:26.000Z</published>
    <updated>2023-05-08T11:12:43.584Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新建文章的命令为</span><br><span class="line">hexo new post articleName</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>冶炼金属</title>
    <link href="http://example.com/posts/8879/"/>
    <id>http://example.com/posts/8879/</id>
    <published>2023-04-16T08:09:24.000Z</published>
    <updated>2023-05-12T14:36:46.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$ x^2</span><br><span class="line">$ \overset&#123;&#123;-10^100&#125;\leq A \leq &#123;10^100&#125;&#125;$。</span><br><span class="line">小蓝有一个神奇的炉子用于将普通金属 O冶炼成为一种特殊金属 X。</span><br><span class="line"></span><br><span class="line">这个炉子有一个称作转换率的属性 V，V是一个正整数，这意味着消耗 V  个普通金属 O  恰好可以冶炼出一个特殊金属 X ，当普通金属 O  的数目不足 V  时，无法继续冶炼。</span><br><span class="line"></span><br><span class="line">现在给出了 N  条冶炼记录，每条记录中包含两个整数 A  和 B ，这表示本次投入了 A  个普通金属 O ，最终冶炼出了 B  个特殊金属 X 。</span><br><span class="line"></span><br><span class="line">每条记录都是独立的，这意味着上一次没消耗完的普通金属 O  不会累加到下一次的冶炼当中。</span><br><span class="line"></span><br><span class="line">根据这 N  条冶炼记录，请你推测出转换率 V  的最小值和最大值分别可能是多少，题目保证评测数据不存在无解的情况。</span><br></pre></td></tr></table></figure><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出两个整数，分别表示 V  可能的最小值和最大值，中间用空格分开。</span><br></pre></td></tr></table></figure><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于 30% 的评测用例，1≤N≤10^2。</span><br><span class="line">对于 60% 的评测用例，1≤N ≤10^3。</span><br><span class="line">对于 100% 的评测用例，1≤N ≤10^4，1≤B≤A ≤10^9。</span><br></pre></td></tr></table></figure><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">75 3</span><br><span class="line">53 2</span><br><span class="line">59 2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20 25</span><br></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 当 V =20 时，有：⌊75/20⌋=3，⌊53/20⌋=2，⌊59/20⌋=2，可以看到符合所有冶炼记录。</span><br><span class="line"></span><br><span class="line">当 V=25 时，有：⌊75/25⌋=3，⌊53/25⌋=2，⌊59/25⌋=2，可以看到符合所有冶炼记录。</span><br><span class="line"></span><br><span class="line">且再也找不到比 20 更小或者比 25 更大的符合条件的 V 值了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> r=<span class="number">2e9</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        r=<span class="built_in">min</span>(r,a/b),l=<span class="built_in">max</span>(l,a/(b+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">解题思路：</span><br><span class="line"></span><br><span class="line">我们已知转化率为V，则a个金属O可以冶炼成为b个金属X(这时候多余的废料肯定在0~V之间)。换句话来说，炼制b个金属X最少需要消耗b*v，那么就有b*V≤a</span><br><span class="line"></span><br><span class="line">由于a个金属O只能冶炼成为b个金属X，冶炼不出来b+1个金属X，则a&lt;(b+1)*V</span><br><span class="line"></span><br><span class="line">那么我们整理一下就得到一个不等式，也就是</span><br><span class="line"></span><br><span class="line">b*V≤a&lt;(b+1)*V</span><br><span class="line"></span><br><span class="line">整理一下我们最后得到的不等式为</span><br><span class="line"></span><br><span class="line">a/(b+1) &lt;V ≤a/b</span><br><span class="line"></span><br><span class="line">这里我们需要知道V的最小应该为(a/(b+1))+1,因为a/(b+1)&lt;V,而不是a/(b+1)≤V。</span><br><span class="line">那么接下来该写代码，我们需要定义左右边界，也就是l，r。我们需要初始化l和r，为了保证我们的初始化有效，我们需要将l初始化成为无穷大，r初始化成为无穷小。然后我们需要将左边的边界不断向符合条件的左边界的最右边逼近，意思就是所有的左边界里面最大的，而右边界和左边界完全相反，是所有的右边界里面最小的。</span><br><span class="line">这一步骤也就是代码段里面的</span><br><span class="line"> r=min(r,a/b),l=max(l,a/(b+1)+1);</span><br><span class="line">等所有的循环完了之后再把l和r输出就行了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解题思路-二分"><a href="#解题思路-二分" class="headerlink" title="解题思路(二分)"></a>解题思路(二分)</h3><pre><code>代码如下</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a/mid&gt;b) l=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> n;</span><br><span class="line">     cin&gt;&gt;n;</span><br><span class="line">     <span class="type">int</span> r=<span class="number">2e9</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        r=<span class="built_in">min</span>(r,<span class="built_in">get</span>(a,b<span class="number">-1</span>)<span class="number">-1</span>);</span><br><span class="line">        l=<span class="built_in">max</span>(l,<span class="built_in">get</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">本题和上面的数学的解法唯一的区别就是</span><br><span class="line">数学解法这里是</span><br><span class="line">  r=min(r,a/b),l=max(l,a/(b+1)+1);</span><br><span class="line">而二分的是</span><br><span class="line">r=min(r,get(a,b-1)-1);</span><br><span class="line">l=max(l,get(a,b));</span><br><span class="line"></span><br><span class="line">对于get(int a,int b)函数的整体的思路是先抄一下二分的模板，再分析一下当mid满足的时候，是l=mid+1还是r=mid。</span><br><span class="line">我们这里进行分析</span><br><span class="line">当a/mid&gt;b时，说明当前的转化率mid符合条件，我们需要将左边界移动到mid+1(因为mid符合条件，所以我们需要将左边界移动到mid+1)，最后我们返回的r就是需要答案。</span><br></pre></td></tr></table></figure><h3 id="最后写一下我在比赛写的垃圾的TLE代码"><a href="#最后写一下我在比赛写的垃圾的TLE代码" class="headerlink" title="最后写一下我在比赛写的垃圾的TLE代码"></a>最后写一下我在比赛写的垃圾的TLE代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a,b,r;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;p[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"> <span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;r&gt;<span class="number">0</span>;--r)</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    <span class="keyword">if</span>(p[i].x/r!=p[i].y)</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   </span><br><span class="line">    cin&gt;&gt;n; </span><br><span class="line">    <span class="type">int</span> r=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;p[i].x&gt;&gt;p[i].y;</span><br><span class="line">        r=<span class="built_in">min</span>(r,p[i].x/p[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l=<span class="built_in">check</span>(r)+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;l&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://blog.csdn.net/m0_70182646/article/details/130115548">https://blog.csdn.net/m0_70182646/article/details/130115548</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello Amireux</title>
    <link href="http://example.com/posts/23468/"/>
    <id>http://example.com/posts/23468/</id>
    <published>2023-01-12T10:19:33.077Z</published>
    <updated>2023-04-17T00:53:01.305Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://helloamireux.github.io/">Amireux</a>!</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I want to create a new post</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is a server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I have successfully deployed</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://helloamireux.github.io/&quot;&gt;Amireux&lt;/a&gt;!&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
</feed>
